
 Fujitsu Fortran Version 1.2.1  Wed Aug 14 10:56:14 2019

 Compilation information
   Current directory : /OFS3/nwpr/gfs/ncust1/VORTEX/src_vor
   Source file       : tranrs.f

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,optmsg=2 -CcdRR8 -Fwide -V -Ec -Qa,d,i,p,t,x -c -Kfast -CcdRR8 -Fwide -c -o tranrs.o -L/package/fx10/dms/dms.v4/lib -lrdms -lgdbm -L/package/fx10/operlib/lib -lnwp -I/opt/FJSVfxlang/1.2.1/include/mpi/fujitsu -Knointentopt -I/opt/FJSVfxlang/1.2.1/lib64
   Effective options    : -fi -g0 -AE -Ec -Fixed -Fwide -O3 -Qa,d,i,p,t,x -X03
                          -CcdRR8 -x0
                          -KSPARC64IXfx -KFLTLD -Kadr44 -Knoauto
                          -Knoautoobjstack -Knocalleralloc -Kdalign -Keval
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kilfunc=loop -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission -Kloop_nofission_if
                          -Kloop_fusion -Kloop_interchange
                          -Kloop_nopart_parallel -Kloop_nopart_simd
                          -Kloop_noversioning -Kns -Kmfunc=1 -Knoocl -Komitfp
                          -Koptmsg=2 -Knopreex -Kprefetch_conditional
                          -Kprefetch_noindirect -Kprefetch_sequential=auto
                          -Kprefetch_nostride -Kprefetch_cache_level=all
                          -Kprefetch_double_line_L2 -Kprefetch_noinfer
                          -Kprefetch_nostrong -Kprefetch_strong_L2
                          -Knoshortloop -Ksimd=1 -Knosimd_region_constant
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Kopenmp_notls
                          -Knothreadsafe -Knoparallel
                          -Kparallel_nofp_precision -Knoarray_private
                          -Knodynamic_iteration -Knoreduction
                          -Knoregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=a -Nlst=d -Nlst=i
                          -Nlst=p -Nlst=t -Nlst=x -Nnomallocfree -Nnoobsfun
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nsetvalue=noheap
                          -Nsetvalue=nostack -Nsetvalue=noscalar
                          -Nsetvalue=noarray -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "tranrs"
  (inc)(line-no.)(nest)(optimize)
               1                           subroutine tranrs (jtrun,jtmax,nx,my,my_max,lev,poly,w,cc
               2                          &                  ,wss,num,nsize)
               3                     c
               4                     c  subroutine to transform a scalar grid point field to spectral
               5                     c  coefficients
               6                     c
               7                     c *** input ***
               8                     c
               9                     c  jtrun: zonal wavenumber truncation limit
              10                     c  jtmax: maximum amount of zonal waves located in each pe
              11                     c  nx: e-w dimension no.
              12                     c  my: n-s dimension no.
              13                     c  my_max: maximum amount of n-s grids located in each pe
              14                     c  lev: number of vertical levels to transform
              15                     c  poly: legendre polynomials
              16                     c  w: gaussian quadrature weights
              17                     c  cc: 3-dim input grid pt. field to be transformed
              18                     c  num: number of variables grouped together
              19                     c
              20                     c *** output ***
              21                     c
              22                     c  wss: spectral coefficient fields
              23                     c
              24                     c  **********************************
              25                     c
              26                           include '../include/index.h'
     1         1                     c      common /mwork/mlistnum,mlist(500)
     1         2                     c     &             ,nlist(500),ilist(500)
     1         3                     c      common /jwork/jlistnum,jlist1(1280),jlist2(1280)
     1         4                     c     &            , jlistnum_tmp(1280)
     1         5                           common /mwork/mlistnum,mlist(1000)
     1         6                          &             ,nlist(1000),ilist(1000)
     1         7                           common /jwork/jlistnum,jlist1(2560),jlist2(2560)
     1         8                          &            , jlistnum_tmp(2560)
              27                           include '../include/paramt.h'
     2         1                     c
     2         2                     cxxx  include paramt.h
     2         3                           parameter (im= 2160, jm= im/2, lm=1, jtr= 2*((1+(im-1)/3)/2)
     2         4                     c      parameter (im= 1800, jm= im/2, lm=1, jtr= 2*((1+(im-1)/3)/2)
     2         5                          *, mlm= jtr*(jtr+1)/2)
     2         6                     c
     2         7                           parameter (imax= 2160, jmax=imax/2, lpx=1, kvkw=im/2)
     2         8                     c      parameter (imax= 1800, jmax=imax/2, lpx=1, kvkw=im/2)
     2         9                     cfj
     2        10                           parameter (ilm=im*lm, im2=kvkw*(lm+1))
     2        11                     cfj
     2        12                     c
     2        13                           parameter ( jmhalf=jm/2, lmX2=lm*2, lmX4=lm*4, lmX10=lm*10 )
     2        14                     c
     2        15                     c  this include file is used in subroutines with internal scratch work
     2        16                     c  arrays.  the above parameters are used to dimension these arrays.
     2        17                     c  on machines with a dynamic array fortran extension, e.g., CRAY and
     2        18                     c  HP, the dimensions can be passed though the subroutine argument list
     2        19                     c  and this include file is unnecessary, making these subroutine truly
     2        20                     c  plug-compatible.  the following parameters in include file 'param.h'
     2        21                     c  must be the same as the above.
     2        22                     c
     2        23                     c  im= nx
     2        24                     c  jm= my
     2        25                     c  lm= lev
     2        26                     c  jtr= jtrun
     2        27                     c  mlm= mlmax
     2        28                     c  lpx= lpout
     2        29                     c  kvkw=lvlw
     2        30                     c
     2        31                     c   imax and jmax are the dimensions of the 2.5 deg input fields
     2        32                     c
     2        33                     c *********************************************************************
     2        34                     cxxx
              28                           include '../include/fftcom.h'
     3         1                     c
     3         2                     cxxx  include fftcom.h
     3         3                     c
     3         4                     ccc   common/fft/ trigs(512),ifax(19)
     3         5                     ct180 common/fft/ trigs(1024),ifax(19)
     3         6                     ct240
     3         7                     c      common/fft/ trigs(2048),ifax(19)
     3         8                           common/fft/ trigs(4096),ifax(19)
     3         9                     c
     3        10                     c  ibm_fft : an option for choosing ibm essl fft routine (ibm_fft=1)
     3        11                     c  "nx" can not be one of the following conditions:
     3        12                     c     (1)radix of 3**i, i>2
     3        13                     c     (2)radix of 5**i, i>1
     3        14                     c     (3)radix of 7**i, i>1
     3        15                     c     (4)radix of 11**i, i>1
     3        16                     c     (5)radix of 13, 17, 19, 23, 29
     3        17                     c
     3        18                     ccc   parameter( ibm_fft = 0 )
     3        19                     c
     3        20                     c  working arrays for ibm_fft
     3        21                     c
     3        22                     ccc   parameter( nwork=22000 )
     3        23                     c     dimension swkd1(nwork),twkd1(nwork)
     3        24                     c     dimension swkd2(nwork),twkd2(nwork)
     3        25                           logical lessl_fft
     3        26                     c     common /ibm_fft/lessl_fft,incx,incy,isign,scale
     3        27                     ccc  &               ,swkd1,twkd1,swkd2,twkd2
     3        28                     
     3        29                     c
     3        30                     c  the parameter below is valid only for original rfftmlt used
     3        31                     c
     3        32                     c  length_fft : an option for doing fft with long or short vector
     3        33                     c  length_fft = 0 : use long vector, which favors vector machines like
     3        34                     c                   vpp5000
     3        35                     c               1 : use short vector, which has better performance
     3        36                     c                   on scalar machines
     3        37                     c
     3        38                           parameter ( length_fft = 1 )
     3        39                     cxxx
              29                     c
              30                           dimension poly(jtrun,my/2,jtmax),w(my)
              31                           dimension cc(nx+3,lev,num,my_max)
              32                           dimension wss(lev,2,num,jtrun,jtmax)
              33                     c
              34                     csun  include '../include/paramt.h' .. change im,jm to nx,my
              35                           dimension  gwk1(nx+3,lev,num,my_max)
              36                     c
              37                           dimension wcc_fk (lev,2,num,jtmax,my_max*nsize)
              38                           dimension twcc_fk(lev,2,num,jtmax*nsize,my_max)
              39                     c
              40                           dimension wccSUM(lev*2*num,my/2)
              41                           dimension wccDIF(lev*2*num,my/2)
              42                     cfong--
              43                           dimension polyw(jm/2,jtr,jtr)
              44                           logical wfirst
              45                           data wfirst/.true./
              46                           save wfirst, polyw
              47                     cfong--
              48                     c
              49                           mlx= (jtrun/2)*((jtrun+1)/2)
              50                           myhalf=my/2
              51                           lev2=lev*2
              52                     c
              53                     cfong--
              54     1                     if( wfirst )then
              55     2                     do j = 1, myhalf
              56     3                     do m = 1, mlistnum
              57     3                      mf=mlist(m)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
              58     4       8v            do l = mf, jtrun
              59     4       8v             polyw(j,l,m) = poly(l,j,m)*w(j)
              60     4       8v            end do
              61     3                     end do
              62     2                     end do
              63     1                     wfirst = .false.
              64     1                     endif
              65                     cfong--
              66                     c
              67                     c
              68                     c  fft for each guassian latitude of 2-d field
              69                     c
              70                     cfong
              71     1                     if( length_fft .eq. 0 )then
              72     1                     call rfftmlt(cc,gwk1,trigs,ifax,1,nx+3,nx,lev*jlistnum*num,-1)
              73     1                     else
              74     2       8s            do jj = 1, jlistnum
              75     2       8s             call rfftmlt(cc(1,1,1,jj),gwk1,trigs,ifax,1,nx+3,nx,lev*num,-1)
              76     2       8s            end do
              77     1                     end if
              78                     cfong
              79                     c
              80                     cibm--beg
              81                     
              82                           mchk=iand(jtrun,3)
              83                     
              84     1                     do j =1, jlistnum
              85     2                       do m=1,mchk
              86     2                         mm= 2*m-1
              87     2                         mp= mm+1
              88     2                         mlst=nlist(m)
              89     3                         do ii=1,num
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
              90     4       6v                  do k=1,lev
              91     4       6v                    twcc_fk(k,1,ii,mlst,j)=cc(mm,k,ii,j)
              92     4       6v                    twcc_fk(k,2,ii,mlst,j)=cc(mp,k,ii,j)
              93     4       6v                  enddo
              94     3                         enddo
              95     2                       enddo
              96     1               
              97     2                       do m=mchk+1,jtrun,4
              98     2                         mm= 2*m-1
              99     2                         mp= mm+1
             100     2                         mlst=nlist(m)
             101     2                         mm1= 2*(m+1)-1
             102     2                         mp1= mm1+1
             103     2                         mlst1=nlist(m+1)
             104     2                         mm2= 2*(m+2)-1
             105     2                         mp2= mm2+1
             106     2                         mlst2=nlist(m+2)
             107     2                         mm3= 2*(m+3)-1
             108     2                         mp3= mm3+1
             109     2                         mlst3=nlist(m+3)
             110     3                         do ii=1,num
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             111     4       2v                  do k=1,lev
             112     4       2v                    twcc_fk(k,1,ii,mlst,j)=cc(mm,k,ii,j)
             113     4       2v                    twcc_fk(k,2,ii,mlst,j)=cc(mp,k,ii,j)
             114     4       2v                    twcc_fk(k,1,ii,mlst1,j)=cc(mm1,k,ii,j)
             115     4       2v                    twcc_fk(k,2,ii,mlst1,j)=cc(mp1,k,ii,j)
             116     4       2v                    twcc_fk(k,1,ii,mlst2,j)=cc(mm2,k,ii,j)
             117     4       2v                    twcc_fk(k,2,ii,mlst2,j)=cc(mp2,k,ii,j)
             118     4       2v                    twcc_fk(k,1,ii,mlst3,j)=cc(mm3,k,ii,j)
             119     4       2v                    twcc_fk(k,2,ii,mlst3,j)=cc(mp3,k,ii,j)
             120     4       2v                  enddo
             121     3                         enddo
             122     2                       enddo
             123     1                     enddo
             124                     cibm--end
             125                     
             126                           call mpe_transpose_rs(twcc_fk,wcc_fk,lev*2*num,jtmax,my_max,nsize)
             127                     
             128                     cibm--beg
             129                     
             130     1                     do m=1,mlistnum
             131     1                        mf=mlist(m)
             132     1               
             133     2                     do j=1,myhalf
             134     2                     j1=jlist2(j)
             135     2                     j2=jlist2(my-j+1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             136     3       8v            do k=1,lev2*num
             137     3       8v             wccSUM(k,j)=(wcc_fk(k,1,1,m,j1)+wcc_fk(k,1,1,m,j2))
             138     3       8v             wccDIF(k,j)=(wcc_fk(k,1,1,m,j1)-wcc_fk(k,1,1,m,j2))
             139     3       8v            enddo
             140     2                     enddo
             141     1               
             142     2                     do l=mf,jtrun
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<< Loop-information  End >>>
             143     3        v            do k=1,lev2*num
             144     3        v              wss(k,1,1,l,m) = 0.
             145     3        v            enddo
             146     2                     enddo
             147     1               
             148     1               cfong--beg
             149     1               c     i1=(jtrun-mf+1)/4
             150     1               c     i2=(jtrun-mf+1-i1*4)/2
             151     1               c     i3= jtrun-mf+1-i1*4-i2*2
             152     1               c
             153     1               c     do i=1,i1
             154     1               c     l=mf+(i-1)*4
             155     1               c     do j=1,myhalf
             156     1               c     do k=1,lev2*num
             157     1               c       wss(k,1,1,l  ,m)=wss(k,1,1,l  ,m)+poly(l  ,j,m)*w(j)*wccSUM(k,j)
             158     1               c       wss(k,1,1,l+1,m)=wss(k,1,1,l+1,m)+poly(l+1,j,m)*w(j)*wccDIF(k,j)
             159     1               c       wss(k,1,1,l+2,m)=wss(k,1,1,l+2,m)+poly(l+2,j,m)*w(j)*wccSUM(k,j)
             160     1               c       wss(k,1,1,l+3,m)=wss(k,1,1,l+3,m)+poly(l+3,j,m)*w(j)*wccDIF(k,j)
             161     1               c     enddo
             162     1               c     enddo
             163     1               c     enddo
             164     1               c
             165     1               c     do i=1,i2
             166     1               c     l=mf+i1*4+(i-1)*2
             167     1               c     do j=1,myhalf
             168     1               c     do k=1,lev2*num
             169     1               c       wss(k,1,1,l  ,m)=wss(k,1,1,l  ,m)+poly(l  ,j,m)*w(j)*wccSUM(k,j)
             170     1               c       wss(k,1,1,l+1,m)=wss(k,1,1,l+1,m)+poly(l+1,j,m)*w(j)*wccDIF(k,j)
             171     1               c     enddo
             172     1               c     enddo
             173     1               c     enddo
             174     1               c
             175     1               c     do i=1,i3
             176     1               c     l=jtrun
             177     1               c     do j=1,myhalf
             178     1               c     do k=1,lev2*num
             179     1               c       wss(k,1,1,l  ,m)=wss(k,1,1,l,m)+poly(l,j,m)*w(j)*wccSUM(k,j)
             180     1               c     enddo
             181     1               c     enddo
             182     1               c     enddo
             183     1               c
             184     1               cfong-- cache blocking method
             185     1               c   nb: multiple of 4
             186     1               c
             187     1                       nb = 32
             188     1               c
             189     1                       lchk = iand(jtrun-mf+1, 1)
             190     1                       lle  = jtrun-lchk
             191     1               c
             192     2                       do ll = mf, lle, nb
             193     3                       do kk = 1, lev2*num, nb
             194     4                       do jj = 1, myhalf, nb
             195     4               
             196     5                         do l = ll, min(ll+nb-1, lle), 2
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 4
                                   <<<      wccSUM: 2, wccDIF: 2
                                   <<< Loop-information  End >>>
             197     6                         do k = kk, min(kk+nb-1, lev2*num), 2
             198     6                           sa00 = wss(k  ,1,1,l  ,m)
             199     6                           sa01 = wss(k  ,1,1,l+1,m)
             200     6                           sa10 = wss(k+1,1,1,l  ,m)
             201     6                           sa11 = wss(k+1,1,1,l+1,m)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             202     7       4v                do j = jj, min(jj+nb-1, myhalf)
             203     7       4v                  sa00 = sa00 + polyw(j,l  ,m)*wccSUM(k,j)
             204     7       4v                  sa01 = sa01 + polyw(j,l+1,m)*wccDIF(k,j)
             205     7       4v                  sa10 = sa10 + polyw(j,l  ,m)*wccSUM(k+1,j)
             206     7       4v                  sa11 = sa11 + polyw(j,l+1,m)*wccDIF(k+1,j)
             207     7       4v                enddo
             208     6                           wss(k  ,1,1,l  ,m) = sa00
             209     6                           wss(k  ,1,1,l+1,m) = sa01
             210     6                           wss(k+1,1,1,l  ,m) = sa10
             211     6                           wss(k+1,1,1,l+1,m) = sa11
             212     6                         enddo
             213     5                         enddo
             214     4                       enddo
             215     3                       enddo
             216     2                       enddo
             217     1               c
             218     1               c odd number
             219     1               c
             220     2                       if( lchk.eq.1 )then
             221     2                           l=jtrun
             222     3                       do kk = 1, lev2*num, nb
             223     4                       do jj = 1, myhalf, nb
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 2
                                   <<<      wccSUM: 2
                                   <<< Loop-information  End >>>
             224     5                         do k = kk, min(kk+nb-1, lev2*num), 2
             225     5                           sa00 = wss(k  ,1,1,l,m)
             226     5                           sa10 = wss(k+1,1,1,l,m)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             227     6       6v                do j = jj, min(jj+nb-1, myhalf)
             228     6       6v                  sa00 = sa00 + polyw(j,l  ,m)*wccSUM(k,j)
             229     6       6v                  sa10 = sa10 + polyw(j,l  ,m)*wccSUM(k+1,j)
             230     6       6v                enddo
             231     5                           wss(k  ,1,1,l,m) = sa00
             232     5                           wss(k+1,1,1,l,m) = sa10
             233     5                         enddo
             234     4                       enddo
             235     3                       enddo
             236     2                       endif
             237     1               
             238     1               cfong--end
             239     1               
             240     1                     enddo
             241                     cibm---end
             242                     
             243                           return
             244                           end

 Diagnostic messages: program name(tranrs)
   jwd2003i-i  "../include/fftcom.h", line 25: 'lessl_fft' is declared in INCLUDE but never referenced.
   jwd8220o-i  "tranrs.f", line 1: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "tranrs.f", line 58: SIMD conversion is applied to DO loop with DO variable 'l'.
   jwd8204o-i  "tranrs.f", line 58: This loop is software pipelined.
   jwd8205o-i  "tranrs.f", line 58: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "tranrs.f", line 59: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6123s-i  "tranrs.f", line 74: SIMD conversion cannot be applied to DO loop: a data with restricted type was found in the DO loop.
   jwd8664o-i  "tranrs.f", line 74: This loop is not software pipelined because the loop contains an instruction not covered by software pipelining, such as function call.
   jwd8202o-i  "tranrs.f", line 74: Loop unrolled 8 times.
   jwd6208s-i  "tranrs.f", line 75: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'nx' may be different from the order of data references in serial execution.
   jwd6122s-i  "tranrs.f", line 75: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6001s-i  "tranrs.f", line 90: SIMD conversion is applied to DO loop with DO variable 'k'.
   jwd8663o-i  "tranrs.f", line 90: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "tranrs.f", line 90: Loop unrolled 6 times.
   jwd8209o-i  "tranrs.f", line 91: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "tranrs.f", line 111: SIMD conversion is applied to DO loop with DO variable 'k'.
   jwd8204o-i  "tranrs.f", line 111: This loop is software pipelined.
   jwd8205o-i  "tranrs.f", line 111: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 17.
   jwd8209o-i  "tranrs.f", line 112: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "tranrs.f", line 136: SIMD conversion is applied to DO loop with DO variable 'k'.
   jwd8204o-i  "tranrs.f", line 136: This loop is software pipelined.
   jwd8205o-i  "tranrs.f", line 136: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 65.
   jwd8209o-i  "tranrs.f", line 137: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "tranrs.f", line 143: SIMD conversion is applied to DO loop with DO variable 'k'.
   jwd8663o-i  "tranrs.f", line 143: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8209o-i  "tranrs.f", line 144: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6004s-i  "tranrs.f", line 202: SIMD conversion is applied to DO loop with DO variable 'j'. The DO loop contains a reduction operation.
   jwd8204o-i  "tranrs.f", line 202: This loop is software pipelined.
   jwd8205o-i  "tranrs.f", line 202: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 48.
   jwd8208o-i  "tranrs.f", line 203: Method of calculating sum or product is changed.
   jwd8208o-i  "tranrs.f", line 206: Method of calculating sum or product is changed.
   jwd6004s-i  "tranrs.f", line 227: SIMD conversion is applied to DO loop with DO variable 'j'. The DO loop contains a reduction operation.
   jwd8204o-i  "tranrs.f", line 227: This loop is software pipelined.
   jwd8205o-i  "tranrs.f", line 227: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 48.
   jwd8208o-i  "tranrs.f", line 228: Method of calculating sum or product is changed.

 Procedure information
   Lines      : 325
   Statements : 146
   Stack(byte): 48
   Prefetch num: 6

 Scoping unit of external sub-program : tranrs
   Attribute and Cross reference of name
     cc
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  31
      |(Definition)     : 72  75
      |(Reference)      : 91  92  112  113  114  115  116  117  118  119
     fft
      |(Class and Type) : common name
      |(Attributes)     : 
      |(Declaration)    : 3-8
      |(Definition)     : 
      |(Reference)      : 
     gwk1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 35
      |(Definition)     : 72  75
      |(Reference)      : 
     iand
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 82  189
     ifax
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 3-8
      |(Definition)     : 72  75
      |(Reference)      : 
     ii
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 89  110
      |(Reference)      : 91  91  92  92  112  112  113  113  114  114  115  115  116  116  117  117  118  118  119  119
     ilist
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 1-5
      |(Definition)     : 
      |(Reference)      : 
     ilm
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-10
      |(Definition)     : 
      |(Reference)      : 
     im
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-3
      |(Definition)     : 
      |(Reference)      : 2-3  2-3  2-7  2-10
     im2
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-10
      |(Definition)     : 
      |(Reference)      : 
     imax
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-7
      |(Definition)     : 
      |(Reference)      : 2-7
     j
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 55  84  133  202  227
      |(Reference)      : 59  59  59  91  91  92  92  112  112  113  113  114  114  115  115  116  116  117  117  118  118  119  119  134  135  137  138  203  203  204  204  205  205  206  206  228  228  229  229
     j1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 134
      |(Reference)      : 137  138
     j2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 135
      |(Reference)      : 137  138
     jj
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 74  194  223
      |(Reference)      : 75  202  202  227  227
     jlist1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 1-7
      |(Definition)     : 
      |(Reference)      : 
     jlist2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 1-7
      |(Definition)     : 
      |(Reference)      : 134  135
     jlistnum
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : common-block-object
      |(Declaration)    : 1-7
      |(Definition)     : 
      |(Reference)      : 72  74  84
     jlistnum_tmp
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 1-7
      |(Definition)     : 
      |(Reference)      : 
     jm
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-3
      |(Definition)     : 
      |(Reference)      : 2-13  43
     jmax
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-7
      |(Definition)     : 
      |(Reference)      : 
     jmhalf
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-13
      |(Definition)     : 
      |(Reference)      : 
     jtmax
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 126
      |(Reference)      : 30  32  37  38
     jtr
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-3
      |(Definition)     : 
      |(Reference)      : 2-3  2-3  43  43
     jtrun
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 30  32  49  49  58  82  97  142  189  190  221
     jwork
      |(Class and Type) : common name
      |(Attributes)     : 
      |(Declaration)    : 1-7
      |(Definition)     : 
      |(Reference)      : 
     k
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 90  111  136  143  197  224
      |(Reference)      : 91  91  92  92  112  112  113  113  114  114  115  115  116  116  117  117  118  118  119  119  137  137  137  138  138  138  144  198  199  200  201  203  204  205  206  208  209  210  211  225  226  228  229  231  232
     kk
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 193  222
      |(Reference)      : 197  197  224  224
     kvkw
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-7
      |(Definition)     : 
      |(Reference)      : 2-10
     l
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 58  142  196  221
      |(Reference)      : 59  59  144  198  199  200  201  203  204  205  206  208  209  210  211  225  226  228  229  231  232
     lchk
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 189
      |(Reference)      : 190  220
     length_fft
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 3-38
      |(Definition)     : 
      |(Reference)      : 71
     lessl_fft
      |(Class and Type) : variable name, LOGICAL(4)
      |(Attributes)     : 
      |(Declaration)    : 3-25
      |(Definition)     : 
      |(Reference)      : 
     lev
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 31  32  35  37  38  40  41  51  72  75  90  111  126
     lev2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 51
      |(Reference)      : 136  143  193  197  222  224
     ll
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 192
      |(Reference)      : 196  196
     lle
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 190
      |(Reference)      : 192  196
     lm
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-3
      |(Definition)     : 
      |(Reference)      : 2-10  2-10  2-13  2-13  2-13
     lmX10
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-13
      |(Definition)     : 
      |(Reference)      : 
     lmX2
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-13
      |(Definition)     : 
      |(Reference)      : 
     lmX4
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-13
      |(Definition)     : 
      |(Reference)      : 
     lpx
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-7
      |(Definition)     : 
      |(Reference)      : 
     m
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 56  85  97  130
      |(Reference)      : 57  59  59  86  88  98  100  101  103  104  106  107  109  131  137  137  138  138  144  198  199  200  201  203  204  205  206  208  209  210  211  225  226  228  229  231  232
     mchk
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 82
      |(Reference)      : 85  97
     mf
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 57  131
      |(Reference)      : 58  142  189  192
     min
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 196  197  202  224  227
     mlist
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 1-5
      |(Definition)     : 
      |(Reference)      : 57  131
     mlistnum
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : common-block-object
      |(Declaration)    : 1-5
      |(Definition)     : 
      |(Reference)      : 56  130
     mlm
      |(Class and Type) : named constant, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 2-3
      |(Definition)     : 
      |(Reference)      : 
     mlst
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 88  100
      |(Reference)      : 91  92  112  113
     mlst1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 103
      |(Reference)      : 114  115
     mlst2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 106
      |(Reference)      : 116  117
     mlst3
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 109
      |(Reference)      : 118  119
     mlx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 49
      |(Reference)      : 
     mm
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 86  98
      |(Reference)      : 87  91  99  112
     mm1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 101
      |(Reference)      : 102  114
     mm2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 104
      |(Reference)      : 105  116
     mm3
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 107
      |(Reference)      : 108  118
     mp
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 87  99
      |(Reference)      : 92  113
     mp1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 102
      |(Reference)      : 115
     mp2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 105
      |(Reference)      : 117
     mp3
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 108
      |(Reference)      : 119
     mpe_transpose_rs
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 126
     mwork
      |(Class and Type) : common name
      |(Attributes)     : 
      |(Declaration)    : 1-5
      |(Definition)     : 
      |(Reference)      : 
     my
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 30  30  40  41  50  135
     my_max
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 126
      |(Reference)      : 31  35  37  38
     myhalf
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 50
      |(Reference)      : 55  133  194  202  223  227
     nb
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 187
      |(Reference)      : 192  193  194  196  197  202  222  223  224  227
     nlist
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 1-5
      |(Definition)     : 
      |(Reference)      : 88  100  103  106  109
     nsize
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 126
      |(Reference)      : 37  38
     num
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 31  32  35  37  38  40  41  72  75  89  110  126  136  143  193  197  222  224
     nx
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 72  75
      |(Reference)      : 31  35  72  75
     poly
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  30
      |(Definition)     : 
      |(Reference)      : 59
     polyw
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, SAVE
      |(Declaration)    : 43  46
      |(Definition)     : 59
      |(Reference)      : 203  204  205  206  228  229
     rfftmlt
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 72  75
     sa00
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 198  203  225  228
      |(Reference)      : 203  208  228  231
     sa01
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 199  204
      |(Reference)      : 204  209
     sa10
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 200  205  226  229
      |(Reference)      : 205  210  229  232
     sa11
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 201  206
      |(Reference)      : 206  211
     tranrs
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1
      |(Reference)      : 
     trigs
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, common-block-object
      |(Declaration)    : 3-8
      |(Definition)     : 72  75
      |(Reference)      : 
     twcc_fk
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 38
      |(Definition)     : 91  92  112  113  114  115  116  117  118  119  126
      |(Reference)      : 
     w
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  30
      |(Definition)     : 
      |(Reference)      : 59
     wccDIF
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 41
      |(Definition)     : 138
      |(Reference)      : 204  206
     wccSUM
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 40
      |(Definition)     : 137
      |(Reference)      : 203  205  228  229
     wcc_fk
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION
      |(Declaration)    : 37
      |(Definition)     : 126
      |(Reference)      : 137  137  138  138
     wfirst
      |(Class and Type) : variable name, LOGICAL(4)
      |(Attributes)     : SAVE, initialized
      |(Declaration)    : 44  45  46
      |(Definition)     : 63
      |(Reference)      : 54
     wss
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  32
      |(Definition)     : 144  208  209  210  211  231  232
      |(Reference)      : 198  199  200  201  225  226

 Total information
   Procedures       : 1
   Total lines      : 325
   Total statements : 146
   Total stack(byte): 48
   Total prefetch num: 6

 Include file name list
     1 : ../include/index.h
     2 : ../include/paramt.h
     3 : ../include/fftcom.h

