
 Fujitsu Fortran Version 1.2.1  Wed Aug 14 10:56:25 2019

 Compilation information
   Current directory : /OFS3/nwpr/gfs/ncust1/VORTEX/src_vor
   Source file       : fftx.f

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,optmsg=2 -CcdRR8 -Fwide -V -Ec -Qa,d,i,p,t,x -c -Kfast -CcdRR8 -Fwide -c -o fftx.o -L/package/fx10/dms/dms.v4/lib -lrdms -lgdbm -L/package/fx10/operlib/lib -lnwp -I/opt/FJSVfxlang/1.2.1/include/mpi/fujitsu -Knointentopt -I/opt/FJSVfxlang/1.2.1/lib64
   Effective options    : -fi -g0 -AE -Ec -Fixed -Fwide -O3 -Qa,d,i,p,t,x -X03
                          -CcdRR8 -x0
                          -KSPARC64IXfx -KFLTLD -Kadr44 -Knoauto
                          -Knoautoobjstack -Knocalleralloc -Kdalign -Keval
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kilfunc=loop -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission -Kloop_nofission_if
                          -Kloop_fusion -Kloop_interchange
                          -Kloop_nopart_parallel -Kloop_nopart_simd
                          -Kloop_noversioning -Kns -Kmfunc=1 -Knoocl -Komitfp
                          -Koptmsg=2 -Knopreex -Kprefetch_conditional
                          -Kprefetch_noindirect -Kprefetch_sequential=auto
                          -Kprefetch_nostride -Kprefetch_cache_level=all
                          -Kprefetch_double_line_L2 -Kprefetch_noinfer
                          -Kprefetch_nostrong -Kprefetch_strong_L2
                          -Knoshortloop -Ksimd=1 -Knosimd_region_constant
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Kopenmp_notls
                          -Knothreadsafe -Knoparallel
                          -Kparallel_nofp_precision -Knoarray_private
                          -Knodynamic_iteration -Knoreduction
                          -Knoregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocompdisp
                          -Nnocopyarg -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nline -Nlst -Nlst=a -Nlst=d -Nlst=i
                          -Nlst=p -Nlst=t -Nlst=x -Nnomallocfree -Nnoobsfun
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nsetvalue=noheap
                          -Nsetvalue=nostack -Nsetvalue=noscalar
                          -Nsetvalue=noarray -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "FFT99"
  (inc)(line-no.)(nest)(optimize)
               1                           SUBROUTINE FFT99(A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
               2                     C
               3                     C PURPOSE      PERFORMS MULTIPLE FAST FOURIER TRANSFORMS.  THIS PACKAGE
               4                     C              WILL PERFORM A NUMBER OF SIMULTANEOUS REAL/HALF-COMPLEX
               5                     C              PERIODIC FOURIER TRANSFORMS OR CORRESPONDING INVERSE
               6                     C              TRANSFORMS, I.E.  GIVEN A SET OF REAL DATA VECTORS, THE
               7                     C              PACKAGE RETURNS A SET OF 'HALF-COMPLEX' FOURIER
               8                     C              COEFFICIENT VECTORS, OR VICE VERSA.  THE LENGTH OF THE
               9                     C              TRANSFORMS MUST BE AN EVEN NUMBER GREATER THAN 4 THAT HAS
              10                     C              NO OTHER FACTORS EXCEPT POSSIBLY POWERS OF 2, 3, AND 5.
              11                     C              THIS IS AN ALL FORTRAN VERSION OF THE CRAYLIB PACKAGE
              12                     C              THAT IS MOSTLY WRITTEN IN CAL.
              13                     C
              14                     C              THE PACKAGE FFT99F CONTAINS SEVERAL USER-LEVEL ROUTINES:
              15                     C
              16                     C            SUBROUTINE FFTFAX
              17                     C                AN INITIALIZATION ROUTINE THAT MUST BE CALLED ONCE
              18                     C                BEFORE A SEQUENCE OF CALLS TO THE FFT ROUTINES
              19                     C                (PROVIDED THAT N IS NOT CHANGED).
              20                     C
              21                     C            SUBROUTINES FFT99 AND FFT991
              22                     C                TWO FFT ROUTINES THAT RETURN SLIGHTLY DIFFERENT
              23                     C                ARRANGEMENTS OF THE DATA IN GRIDPOINT SPACE.
              24                     C
              25                     C
              26                     C ACCESS       THIS FORTRAN VERSION MAY BE ACCESSED WITH
              27                     C
              28                     C                   *FORTRAN,P=XLIB,SN=FFT99F
              29                     C
              30                     C              TO ACCESS THE CRAY OBJECT CODE, CALLING THE USER ENTRY
              31                     C              POINTS FROM A CRAY PROGRAM IS SUFFICIENT.  THE SOURCE
              32                     C              FORTRAN AND CAL CODE FOR THE CRAYLIB VERSION MAY BE
              33                     C              ACCESSED USING
              34                     C
              35                     C                   FETCH P=CRAYLIB,SN=FFT99
              36                     C                   FETCH P=CRAYLIB,SN=CAL99
              37                     C
              38                     C USAGE        LET N BE OF THE FORM 2**P * 3**Q * 5**R, WHERE P .GE. 1,
              39                     C              Q .GE. 0, AND R .GE. 0.  THEN A TYPICAL SEQUENCE OF
              40                     C              CALLS TO TRANSFORM A GIVEN SET OF REAL VECTORS OF LENGTH
              41                     C              N TO A SET OF 'HALF-COMPLEX' FOURIER COEFFICIENT VECTORS
              42                     C              OF LENGTH N IS
              43                     C
              44                     C                   DIMENSION IFAX(13),TRIGS(3*N/2+1),A(M*(N+2)),
              45                     C                  +          WORK(M*(N+1))
              46                     C
              47                     C                   CALL FFTFAX (N, IFAX, TRIGS)
              48                     C                   CALL FFT99 (A,WORK,TRIGS,IFAX,INC,JUMP,N,M,ISIGN)
              49                     C
              50                     C              SEE THE INDIVIDUAL WRITE-UPS FOR FFTFAX, FFT99, AND
              51                     C              FFT991 BELOW, FOR A DETAILED DESCRIPTION OF THE
              52                     C              ARGUMENTS.
              53                     C
              54                     C HISTORY      THE PACKAGE WAS WRITTEN BY CLIVE TEMPERTON AT ECMWF IN
              55                     C              NOVEMBER, 1978.  IT WAS MODIFIED, DOCUMENTED, AND TESTED
              56                     C              FOR NCAR BY RUSS REW IN SEPTEMBER, 1980.
              57                     C
              58                     C-----------------------------------------------------------------------
              59                     C
              60                     C SUBROUTINE FFTFAX (N,IFAX,TRIGS)
              61                     C
              62                     C PURPOSE      A SET-UP ROUTINE FOR FFT99 AND FFT991.  IT NEED ONLY BE
              63                     C              CALLED ONCE BEFORE A SEQUENCE OF CALLS TO THE FFT
              64                     C              ROUTINES (PROVIDED THAT N IS NOT CHANGED).
              65                     C
              66                     C ARGUMENT     IFAX(13),TRIGS(3*N/2+1)
              67                     C DIMENSIONS
              68                     C
              69                     C ARGUMENTS
              70                     C
              71                     C ON INPUT     N
              72                     C               AN EVEN NUMBER GREATER THAN 4 THAT HAS NO PRIME FACTOR
              73                     C               GREATER THAN 5.  N IS THE LENGTH OF THE TRANSFORMS (SEE
              74                     C               THE DOCUMENTATION FOR FFT99 AND FFT991 FOR THE
              75                     C               DEFINITIONS OF THE TRANSFORMS).
              76                     C
              77                     C              IFAX
              78                     C               AN INTEGER ARRAY.  THE NUMBER OF ELEMENTS ACTUALLY USED
              79                     C               WILL DEPEND ON THE FACTORIZATION OF N.  DIMENSIONING
              80                     C               IFAX FOR 13 SUFFICES FOR ALL N LESS THAN A MILLION.
              81                     C
              82                     C              TRIGS
              83                     C               A FLOATING POINT ARRAY OF DIMENSION 3*N/2 IF N/2 IS
              84                     C               EVEN, OR 3*N/2+1 IF N/2 IS ODD.
              85                     C
              86                     C ON OUTPUT    IFAX
              87                     C               CONTAINS THE FACTORIZATION OF N/2.  IFAX(1) IS THE
              88                     C               NUMBER OF FACTORS, AND THE FACTORS THEMSELVES ARE STORED
              89                     C               IN IFAX(2),IFAX(3),...  IF FFTFAX IS CALLED WITH N ODD,
              90                     C               OR IF N HAS ANY PRIME FACTORS GREATER THAN 5, IFAX(1)
              91                     C               IS SET TO -99.
              92                     C
              93                     C              TRIGS
              94                     C               AN ARRAY OF TRIGNOMENTRIC FUNCTION VALUES SUBSEQUENTLY
              95                     C               USED BY THE FFT ROUTINES.
              96                     C
              97                     C-----------------------------------------------------------------------
              98                     C
              99                     C SUBROUTINE FFT991 (A,WORK,TRIGS,IFAX,INC,JUMP,N,M,ISIGN)
             100                     C                       AND
             101                     C SUBROUTINE FFT99 (A,WORK,TRIGS,IFAX,INC,JUMP,N,M,ISIGN)
             102                     C
             103                     C PURPOSE      PERFORM A NUMBER OF SIMULTANEOUS REAL/HALF-COMPLEX
             104                     C              PERIODIC FOURIER TRANSFORMS OR CORRESPONDING INVERSE
             105                     C              TRANSFORMS, USING ORDINARY SPATIAL ORDER OF GRIDPOINT
             106                     C              VALUES (FFT991) OR EXPLICIT CYCLIC CONTINUITY IN THE
             107                     C              GRIDPOINT VALUES (FFT99).  GIVEN A SET
             108                     C              OF REAL DATA VECTORS, THE PACKAGE RETURNS A SET OF
             109                     C              'HALF-COMPLEX' FOURIER COEFFICIENT VECTORS, OR VICE
             110                     C              VERSA.  THE LENGTH OF THE TRANSFORMS MUST BE AN EVEN
             111                     C              NUMBER THAT HAS NO OTHER FACTORS EXCEPT POSSIBLY POWERS
             112                     C              OF 2, 3, AND 5.  THESE VERSION OF FFT991 AND FFT99 ARE
             113                     C              OPTIMIZED FOR USE ON THE CRAY-1.
             114                     C
             115                     C ARGUMENT     A(M*(N+2)), WORK(M*(N+1)), TRIGS(3*N/2+1), IFAX(13)
             116                     C DIMENSIONS
             117                     C
             118                     C ARGUMENTS
             119                     C
             120                     C ON INPUT     A
             121                     C               AN ARRAY OF LENGTH M*(N+2) CONTAINING THE INPUT DATA
             122                     C               OR COEFFICIENT VECTORS.  THIS ARRAY IS OVERWRITTEN BY
             123                     C               THE RESULTS.
             124                     C
             125                     C              WORK
             126                     C               A WORK ARRAY OF DIMENSION M*(N+1)
             127                     C
             128                     C              TRIGS
             129                     C               AN ARRAY SET UP BY FFTFAX, WHICH MUST BE CALLED FIRST.
             130                     C
             131                     C              IFAX
             132                     C               AN ARRAY SET UP BY FFTFAX, WHICH MUST BE CALLED FIRST.
             133                     C
             134                     C              INC
             135                     C               THE INCREMENT (IN WORDS) BETWEEN SUCCESSIVE ELEMENTS OF
             136                     C               EACH DATA OR COEFFICIENT VECTOR (E.G.  INC=1 FOR
             137                     C               CONSECUTIVELY STORED DATA).
             138                     C
             139                     C              JUMP
             140                     C               THE INCREMENT (IN WORDS) BETWEEN THE FIRST ELEMENTS OF
             141                     C               SUCCESSIVE DATA OR COEFFICIENT VECTORS.  ON THE CRAY-1,
             142                     C               TRY TO ARRANGE DATA SO THAT JUMP IS NOT A MULTIPLE OF 8
             143                     C               (TO AVOID MEMORY BANK CONFLICTS).  FOR CLARIFICATION OF
             144                     C               INC AND JUMP, SEE THE EXAMPLES BELOW.
             145                     C
             146                     C              N
             147                     C               THE LENGTH OF EACH TRANSFORM (SEE DEFINITION OF
             148                     C               TRANSFORMS, BELOW).
             149                     C
             150                     C              M
             151                     C               THE NUMBER OF TRANSFORMS TO BE DONE SIMULTANEOUSLY.
             152                     C
             153                     C              ISIGN
             154                     C               = +1 FOR A TRANSFORM FROM FOURIER COEFFICIENTS TO
             155                     C                    GRIDPOINT VALUES.
             156                     C               = -1 FOR A TRANSFORM FROM GRIDPOINT VALUES TO FOURIER
             157                     C                    COEFFICIENTS.
             158                     C
             159                     C ON OUTPUT    A
             160                     C               IF ISIGN = +1, AND M COEFFICIENT VECTORS ARE SUPPLIED
             161                     C               EACH CONTAINING THE SEQUENCE:
             162                     C
             163                     C               A(0),B(0),A(1),B(1),...,A(N/2),B(N/2)  (N+2 VALUES)
             164                     C
             165                     C               THEN THE RESULT CONSISTS OF M DATA VECTORS EACH
             166                     C               CONTAINING THE CORRESPONDING N+2 GRIDPOINT VALUES:
             167                     C
             168                     C               FOR FFT991, X(0), X(1), X(2),...,X(N-1),0,0.
             169                     C               FOR FFT99, X(N-1),X(0),X(1),X(2),...,X(N-1),X(0).
             170                     C                   (EXPLICIT CYCLIC CONTINUITY)
             171                     C
             172                     C               WHEN ISIGN = +1, THE TRANSFORM IS DEFINED BY:
             173                     C                 X(J)=SUM(K=0,...,N-1)(C(K)*EXP(2*I*J*K*PI/N))
             174                     C                 WHERE C(K)=A(K)+I*B(K) AND C(N-K)=A(K)-I*B(K)
             175                     C                 AND I=SQRT (-1)
             176                     C
             177                     C               IF ISIGN = -1, AND M DATA VECTORS ARE SUPPLIED EACH
             178                     C               CONTAINING A SEQUENCE OF GRIDPOINT VALUES X(J) AS
             179                     C               DEFINED ABOVE, THEN THE RESULT CONSISTS OF M VECTORS
             180                     C               EACH CONTAINING THE CORRESPONDING FOURIER COFFICIENTS
             181                     C               A(K), B(K), 0 .LE. K .LE N/2.
             182                     C
             183                     C               WHEN ISIGN = -1, THE INVERSE TRANSFORM IS DEFINED BY:
             184                     C                 C(K)=(1/N)*SUM(J=0,...,N-1)(X(J)*EXP(-2*I*J*K*PI/N))
             185                     C                 WHERE C(K)=A(K)+I*B(K) AND I=SQRT(-1)
             186                     C
             187                     C               A CALL WITH ISIGN=+1 FOLLOWED BY A CALL WITH ISIGN=-1
             188                     C               (OR VICE VERSA) RETURNS THE ORIGINAL DATA.
             189                     C
             190                     C               NOTE: THE FACT THAT THE GRIDPOINT VALUES X(J) ARE REAL
             191                     C               IMPLIES THAT B(0)=B(N/2)=0.  FOR A CALL WITH ISIGN=+1,
             192                     C               IT IS NOT ACTUALLY NECESSARY TO SUPPLY THESE ZEROS.
             193                     C
             194                     C EXAMPLES      GIVEN 19 DATA VECTORS EACH OF LENGTH 64 (+2 FOR EXPLICIT
             195                     C               CYCLIC CONTINUITY), COMPUTE THE CORRESPONDING VECTORS OF
             196                     C               FOURIER COEFFICIENTS.  THE DATA MAY, FOR EXAMPLE, BE
             197                     C               ARRANGED LIKE THIS:
             198                     C
             199                     C FIRST DATA   A(1)=    . . .                A(66)=             A(70)
             200                     C VECTOR       X(63) X(0) X(1) X(2) ... X(63) X(0)  (4 EMPTY LOCATIONS)
             201                     C
             202                     C SECOND DATA  A(71)=   . . .                                  A(140)
             203                     C VECTOR       X(63) X(0) X(1) X(2) ... X(63) X(0)  (4 EMPTY LOCATIONS)
             204                     C
             205                     C               AND SO ON.  HERE INC=1, JUMP=70, N=64, M=19, ISIGN=-1,
             206                     C               AND FFT99 SHOULD BE USED (BECAUSE OF THE EXPLICIT CYCLIC
             207                     C               CONTINUITY).
             208                     C
             209                     C               ALTERNATIVELY THE DATA MAY BE ARRANGED LIKE THIS:
             210                     C
             211                     C                FIRST         SECOND                          LAST
             212                     C                DATA          DATA                            DATA
             213                     C                VECTOR        VECTOR                          VECTOR
             214                     C
             215                     C                 A(1)=         A(2)=                           A(19)=
             216                     C
             217                     C                 X(63)         X(63)       . . .               X(63)
             218                     C        A(20)=   X(0)          X(0)        . . .               X(0)
             219                     C        A(39)=   X(1)          X(1)        . . .               X(1)
             220                     C                  .             .                               .
             221                     C                  .             .                               .
             222                     C                  .             .                               .
             223                     C
             224                     C               IN WHICH CASE WE HAVE INC=19, JUMP=1, AND THE REMAINING
             225                     C               PARAMETERS ARE THE SAME AS BEFORE.  IN EITHER CASE, EACH
             226                     C               COEFFICIENT VECTOR OVERWRITES THE CORRESPONDING INPUT
             227                     C               DATA VECTOR.
             228                     C
             229                     C-----------------------------------------------------------------------
             230                           DIMENSION A(N),WORK(N),TRIGS(N),IFAX(1)
             231                     C
             232                     C     SUBROUTINE !FFT99! - MULTIPLE FAST REAL PERIODIC TRANSFORM
             233                     C     CORRESPONDING TO OLD SCALAR ROUTINE FFT9
             234                     C     PROCEDURE USED TO CONVERT TO HALF-LENGTH COMPLEX TRANSFORM
             235                     C     IS GIVEN BY COOLEY, LEWIS AND WELCH (J. SOUND VIB., VOL. 12
             236                     C     (1970), 315-337)
             237                     C
             238                     C     A IS THE ARRAY CONTAINING INPUT AND OUTPUT DATA
             239                     C     WORK IS AN AREA OF SIZE (N+1)*LOT
             240                     C     TRIGS IS A PREVIOUSLY PREPARED LIST OF TRIG FUNCTION VALUES
             241                     C     IFAX IS A PREVIOUSLY PREPARED LIST OF FACTORS OF N/2
             242                     C     INC IS THE INCREMENT WITHIN EACH DATA 'VECTOR'
             243                     C         (E.G. INC=1 FOR CONSECUTIVELY STORED DATA)
             244                     C     JUMP IS THE INCREMENT BETWEEN THE START OF EACH DATA VECTOR
             245                     C     N IS THE LENGTH OF THE DATA VECTORS
             246                     C     LOT IS THE NUMBER OF DATA VECTORS
             247                     C     ISIGN = +1 FOR TRANSFORM FROM SPECTRAL TO GRIDPOINT
             248                     C           = -1 FOR TRANSFORM FROM GRIDPOINT TO SPECTRAL
             249                     C
             250                     C     ORDERING OF COEFFICIENTS:
             251                     C         A(0),B(0),A(1),B(1),A(2),B(2),...,A(N/2),B(N/2)
             252                     C         WHERE B(0)=B(N/2)=0; (N+2) LOCATIONS REQUIRED
             253                     C
             254                     C     ORDERING OF DATA:
             255                     C         X(N-1),X(0),X(1),X(2),...,X(N),X(0)
             256                     C         I.E. EXPLICIT CYCLIC CONTINUITY; (N+2) LOCATIONS REQUIRED
             257                     C
             258                     C     VECTORIZATION IS ACHIEVED ON CRAY BY DOING THE TRANSFORMS IN
             259                     C     PARALLEL
             260                     C
             261                     C     *** N.B. N IS ASSUMED TO BE AN EVEN NUMBER
             262                     C
             263                     C     DEFINITION OF TRANSFORMS:
             264                     C     -------------------------
             265                     C
             266                     C     ISIGN=+1: X(J)=SUM(K=0,...,N-1)(C(K)*EXP(2*I*J*K*PI/N))
             267                     C         WHERE C(K)=A(K)+I*B(K) AND C(N-K)=A(K)-I*B(K)
             268                     C
             269                     C     ISIGN=-1: A(K)=(1/N)*SUM(J=0,...,N-1)(X(J)*COS(2*J*K*PI/N))
             270                     C               B(K)=-(1/N)*SUM(J=0,...,N-1)(X(J)*SIN(2*J*K*PI/N))
             271                     C
             272                     C
             273                     C THE FOLLOWING CALL IS FOR MONITORING LIBRARY USE AT NCAR
             274                     C      CALL Q8QST4 ( 4HXLIB, 6HFFT99F, 5HFFT99, 10HVERSION 01)
             275                           NFAX=IFAX(1)
             276                           NX=N+1
             277                           NH=N/2
             278                           INK=INC+INC
             279                           IF (ISIGN.EQ.+1) GO TO 30
             280                     C
             281                     C     IF NECESSARY, TRANSFER DATA TO WORK AREA
             282                           IGO=50
             283                           IF (MOD(NFAX,2).EQ.1) GOTO 40
             284                           IBASE=INC+1
             285                           JBASE=1
             286     1                     DO 20 L=1,LOT
             287     1                     I=IBASE
             288     1                     J=JBASE
             289     1               CDIR$ IVDEP
             290     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             291     2       8v            DO 10 M=1,N
             292     2       8v            WORK(J)=A(I)
             293     2       8v            I=I+INC
             294     2       8v            J=J+1
             295     2       8v         10 CONTINUE
             296     1                     IBASE=IBASE+JUMP
             297     1                     JBASE=JBASE+NX
             298     1                  20 CONTINUE
             299                     C
             300                           IGO=60
             301                           GO TO 40
             302                     C
             303                     C     PREPROCESSING (ISIGN=+1)
             304                     C     ------------------------
             305                     C
             306                        30 CONTINUE
             307                           CALL FFT99A(A,WORK,TRIGS,INC,JUMP,N,LOT)
             308                           IGO=60
             309                     C
             310                     C     COMPLEX TRANSFORM
             311                     C     -----------------
             312                     C
             313                        40 CONTINUE
             314                           IA=INC+1
             315                           LA=1
             316     1       4s            DO 80 K=1,NFAX
             317     1       4s            IF (IGO.EQ.60) GO TO 60
             318     1       4s         50 CONTINUE
             319     1       4s            CALL VPASSM(A(IA),A(IA+INC),WORK(1),WORK(2),TRIGS,
             320     1                    *   INK,2,JUMP,NX,LOT,NH,IFAX(K+1),LA)
             321     1       4s            IGO=60
             322     1       4s            GO TO 70
             323     1       4s         60 CONTINUE
             324     1       4s            CALL VPASSM(WORK(1),WORK(2),A(IA),A(IA+INC),TRIGS,
             325     1                    *    2,INK,NX,JUMP,LOT,NH,IFAX(K+1),LA)
             326     1       4s            IGO=50
             327     1       4s         70 CONTINUE
             328     1       4s            LA=LA*IFAX(K+1)
             329     1       4s         80 CONTINUE
             330                     C
             331                           IF (ISIGN.EQ.-1) GO TO 130
             332                     C
             333                     C     IF NECESSARY, TRANSFER DATA FROM WORK AREA
             334                           IF (MOD(NFAX,2).EQ.1) GO TO 110
             335                           IBASE=1
             336                           JBASE=IA
             337     1                     DO 100 L=1,LOT
             338     1                     I=IBASE
             339     1                     J=JBASE
             340     1               CDIR$ IVDEP
             341     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             342     2       8v            DO 90 M=1,N
             343     2       8v            A(J)=WORK(I)
             344     2       8v            I=I+1
             345     2       8v            J=J+INC
             346     2       8v         90 CONTINUE
             347     1                     IBASE=IBASE+NX
             348     1                     JBASE=JBASE+JUMP
             349     1                 100 CONTINUE
             350                     C
             351                     C     FILL IN CYCLIC BOUNDARY POINTS
             352                       110 CONTINUE
             353                           IA=1
             354                           IB=N*INC+1
             355                     CDIR$ IVDEP
             356                     !ocl novrec
             357     1       8s            DO 120 L=1,LOT
             358     1       8s            A(IA)=A(IB)
             359     1       8s            A(IB+INC)=A(IA+INC)
             360     1       8s            IA=IA+JUMP
             361     1       8s            IB=IB+JUMP
             362     1       8s        120 CONTINUE
             363                           GO TO 140
             364                     C
             365                     C     POSTPROCESSING (ISIGN=-1):
             366                     C     --------------------------
             367                     C
             368                       130 CONTINUE
             369                           CALL FFT99B(WORK,A,TRIGS,INC,JUMP,N,LOT)
             370                     C
             371                       140 CONTINUE
             372                           RETURN
             373                           END

 Diagnostic messages: program name(FFT99)
   jwd6001s-i  "fftx.f", line 291: SIMD conversion is applied to DO loop with DO variable 'M'.
   jwd8204o-i  "fftx.f", line 291: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 291: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 32.
   jwd6123s-i  "fftx.f", line 316: SIMD conversion cannot be applied to DO loop: a data with restricted type was found in the DO loop.
   jwd6229s-i  "fftx.f", line 316: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8664o-i  "fftx.f", line 316: This loop is not software pipelined because the loop contains an instruction not covered by software pipelining, such as function call.
   jwd8202o-i  "fftx.f", line 316: Loop unrolled 4 times.
   jwd6202s-i  "fftx.f", line 317: SIMD conversion cannot be applied to DO loop: data dependency of variable 'IGO' may cause different results from serial execution for loop.
   jwd6208s-i  "fftx.f", line 318: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUMP' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 318: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 318: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'INK' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'NH' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'TRIGS' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LA' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'NX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUMP' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'WORK' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'A' may be different from the order of data references in serial execution.
   jwd6122s-i  "fftx.f", line 319: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6208s-i  "fftx.f", line 324: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUMP' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 324: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 324: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6122s-i  "fftx.f", line 324: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6202s-i  "fftx.f", line 328: SIMD conversion cannot be applied to DO loop: data dependency of variable 'LA' may cause different results from serial execution for loop.
   jwd6208s-i  "fftx.f", line 328: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6001s-i  "fftx.f", line 342: SIMD conversion is applied to DO loop with DO variable 'M'.
   jwd8204o-i  "fftx.f", line 342: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 342: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8662o-i  "fftx.f", line 357: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "fftx.f", line 357: Loop unrolled 8 times.
   jwd6206s-i  "fftx.f", line 358: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'IA' in rank '1' of array 'A' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 358: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'IB' in rank '1' of array 'A' may cause different results from serial execution.

 Procedure information
   Lines      : 373
   Statements : 72
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : FFT99
   Attribute and Cross reference of name
     A
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  230
      |(Definition)     : 307  319  319  324  324  343  358  359  369
      |(Reference)      : 292  358  359
     FFT99
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1
      |(Reference)      : 
     FFT99A
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 307
     FFT99B
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 369
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 287  293  338  344
      |(Reference)      : 292  293  343  344
     IA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 314  353  360
      |(Reference)      : 319  319  324  324  336  358  359  360
     IB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 354  361
      |(Reference)      : 358  359  361
     IBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 284  296  335  347
      |(Reference)      : 287  296  338  347
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  230
      |(Definition)     : 319  324
      |(Reference)      : 275  328
     IGO
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 282  300  308  321  326
      |(Reference)      : 317
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 307  369
      |(Reference)      : 278  278  284  293  314  319  324  345  354  359  359
     INK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 278  319  324
      |(Reference)      : 
     ISIGN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 
      |(Reference)      : 279  331
     J
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 288  294  339  345
      |(Reference)      : 292  294  343  345
     JBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 285  297  336  348
      |(Reference)      : 288  297  339  348
     JUMP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 307  319  324  369
      |(Reference)      : 296  348  360  361
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 316
      |(Reference)      : 319  324  328
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 286  337  357
      |(Reference)      : 
     LA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 315  319  324  328
      |(Reference)      : 328
     LOT
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 307  319  324  369
      |(Reference)      : 286  337  357
     M
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 291  342
      |(Reference)      : 
     MOD
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 283  334
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1
      |(Definition)     : 307  369
      |(Reference)      : 230  230  230  276  277  291  342  354
     NFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 275
      |(Reference)      : 283  316  334
     NH
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 277  319  324
      |(Reference)      : 
     NX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 276  319  324
      |(Reference)      : 297  347
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  230
      |(Definition)     : 307  319  324  369
      |(Reference)      : 
     VPASSM
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 319  324
     WORK
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1  230
      |(Definition)     : 292  307  319  319  324  324  369
      |(Reference)      : 343
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 295  
                           (Reference)  291
         20  execution     (Definition) 298  
                           (Reference)  286
         30  execution     (Definition) 306  
                           (Reference)  279
         40  execution     (Definition) 313  
                           (Reference)  283  301
         50  execution     (Definition) 318
         60  execution     (Definition) 323  
                           (Reference)  317
         70  execution     (Definition) 327  
                           (Reference)  322
         80  execution     (Definition) 329  
                           (Reference)  316
         90  execution     (Definition) 346  
                           (Reference)  342
        100  execution     (Definition) 349  
                           (Reference)  337
        110  execution     (Definition) 352  
                           (Reference)  334
        120  execution     (Definition) 362  
                           (Reference)  357
        130  execution     (Definition) 368  
                           (Reference)  331
        140  execution     (Definition) 371  
                           (Reference)  363

 External subroutine subprogram "FFT99A"
  (inc)(line-no.)(nest)(optimize)
             374                           SUBROUTINE FFT99A(A,WORK,TRIGS,INC,JUMP,N,LOT)
             375                           DIMENSION A(N),WORK(N),TRIGS(N)
             376                     C
             377                     C     SUBROUTINE FFT99A - PREPROCESSING STEP FOR FFT99, ISIGN=+1
             378                     C     (SPECTRAL TO GRIDPOINT TRANSFORM)
             379                     C
             380                           NH=N/2
             381                           NX=N+1
             382                           INK=INC+INC
             383                     C
             384                     C     A(0) AND A(N/2)
             385                           IA=1
             386                           IB=N*INC+1
             387                           JA=1
             388                           JB=2
             389                     CDIR$ IVDEP
             390                     !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             391     1       8s            DO 10 L=1,LOT
             392     1       8m            WORK(JA)=A(IA)+A(IB)
             393     1       8m            WORK(JB)=A(IA)-A(IB)
             394     1       8v            IA=IA+JUMP
             395     1       8v            IB=IB+JUMP
             396     1       8v            JA=JA+NX
             397     1       8v            JB=JB+NX
             398     1       8v         10 CONTINUE
             399                     C
             400                     C     REMAINING WAVENUMBERS
             401                           IABASE=2*INC+1
             402                           IBBASE=(N-2)*INC+1
             403                           JABASE=3
             404                           JBBASE=N-1
             405                     C
             406     1                     DO 30 K=3,NH,2
             407     1                     IA=IABASE
             408     1                     IB=IBBASE
             409     1                     JA=JABASE
             410     1                     JB=JBBASE
             411     1                     C=TRIGS(N+K)
             412     1                     S=TRIGS(N+K+1)
             413     1               CDIR$ IVDEP
             414     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             415     2       4s            DO 20 L=1,LOT
             416     2       4m            WORK(JA)=(A(IA)+A(IB))-
             417     2                    *    (S*(A(IA)-A(IB))+C*(A(IA+INC)+A(IB+INC)))
             418     2       4m            WORK(JB)=(A(IA)+A(IB))+
             419     2                    *    (S*(A(IA)-A(IB))+C*(A(IA+INC)+A(IB+INC)))
             420     2       4m            WORK(JA+1)=(C*(A(IA)-A(IB))-S*(A(IA+INC)+A(IB+INC)))+
             421     2                    *    (A(IA+INC)-A(IB+INC))
             422     2       4m            WORK(JB+1)=(C*(A(IA)-A(IB))-S*(A(IA+INC)+A(IB+INC)))-
             423     2                    *    (A(IA+INC)-A(IB+INC))
             424     2       4v            IA=IA+JUMP
             425     2       4v            IB=IB+JUMP
             426     2       4v            JA=JA+NX
             427     2       4v            JB=JB+NX
             428     2       4v         20 CONTINUE
             429     1                     IABASE=IABASE+INK
             430     1                     IBBASE=IBBASE-INK
             431     1                     JABASE=JABASE+2
             432     1                     JBBASE=JBBASE-2
             433     1                  30 CONTINUE
             434                     C
             435                           IF (IABASE.NE.IBBASE) GO TO 50
             436                     C     WAVENUMBER N/4 (IF IT EXISTS)
             437                           IA=IABASE
             438                           JA=JABASE
             439                     CDIR$ IVDEP
             440                     !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             441     1       8s            DO 40 L=1,LOT
             442     1       8m            WORK(JA)=2.0*A(IA)
             443     1       8m            WORK(JA+1)=-2.0*A(IA+INC)
             444     1       8v            IA=IA+JUMP
             445     1       8v            JA=JA+NX
             446     1       8v         40 CONTINUE
             447                     C
             448                        50 CONTINUE
             449                           RETURN
             450                           END

 Diagnostic messages: program name(FFT99A)
   jwd8220o-i  "fftx.f", line 374: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "fftx.f", line 391: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 391: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 32.
   jwd6206s-i  "fftx.f", line 392: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JA' in rank '1' of array 'WORK' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 415: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 415: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 28.
   jwd6206s-i  "fftx.f", line 416: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JA' in rank '1' of array 'WORK' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 418: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JB' in rank '1' of array 'WORK' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 420: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 422: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "fftx.f", line 441: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 441: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 40.
   jwd6206s-i  "fftx.f", line 442: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JA' in rank '1' of array 'WORK' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 443: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 77
   Statements : 55
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : FFT99A
   Attribute and Cross reference of name
     A
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 374  375
      |(Definition)     : 
      |(Reference)      : 392  392  393  393  416  416  416  416  416  416  418  418  418  418  418  418  420  420  420  420  420  420  422  422  422  422  422  422  442  443
     C
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 411
      |(Reference)      : 416  418  420  422
     FFT99A
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 374
      |(Reference)      : 
     IA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 385  394  407  424  437  444
      |(Reference)      : 392  393  394  416  416  416  418  418  418  420  420  420  422  422  422  424  442  443  444
     IABASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 401  429
      |(Reference)      : 407  429  435  437
     IB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 386  395  408  425
      |(Reference)      : 392  393  395  416  416  416  418  418  418  420  420  420  422  422  422  425
     IBBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 402  430
      |(Reference)      : 408  430  435
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 374
      |(Definition)     : 
      |(Reference)      : 382  382  386  401  402  416  416  418  418  420  420  420  420  422  422  422  422  443
     INK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 382
      |(Reference)      : 429  430
     JA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 387  396  409  426  438  445
      |(Reference)      : 392  396  416  420  426  442  443  445
     JABASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 403  431
      |(Reference)      : 409  431  438
     JB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 388  397  410  427
      |(Reference)      : 393  397  418  422  427
     JBBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 404  432
      |(Reference)      : 410  432
     JUMP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 374
      |(Definition)     : 
      |(Reference)      : 394  395  424  425  444
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 406
      |(Reference)      : 411  412
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 391  415  441
      |(Reference)      : 
     LOT
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 374
      |(Definition)     : 
      |(Reference)      : 391  415  441
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 374
      |(Definition)     : 
      |(Reference)      : 375  375  375  380  381  386  402  404  411  412
     NH
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 380
      |(Reference)      : 406
     NX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 381
      |(Reference)      : 396  397  426  427  445
     S
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 412
      |(Reference)      : 416  418  420  422
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 374  375
      |(Definition)     : 
      |(Reference)      : 411  412
     WORK
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 374  375
      |(Definition)     : 392  393  416  418  420  422  442  443
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 398  
                           (Reference)  391
         20  execution     (Definition) 428  
                           (Reference)  415
         30  execution     (Definition) 433  
                           (Reference)  406
         40  execution     (Definition) 446  
                           (Reference)  441
         50  execution     (Definition) 448  
                           (Reference)  435

 External subroutine subprogram "FFT99B"
  (inc)(line-no.)(nest)(optimize)
             451                           SUBROUTINE FFT99B(WORK,A,TRIGS,INC,JUMP,N,LOT)
             452                           DIMENSION WORK(N),A(N),TRIGS(N)
             453                     C
             454                     C     SUBROUTINE FFT99B - POSTPROCESSING STEP FOR FFT99, ISIGN=-1
             455                     C     (GRIDPOINT TO SPECTRAL TRANSFORM)
             456                     C
             457                           NH=N/2
             458                           NX=N+1
             459                           INK=INC+INC
             460                     C
             461                     C     A(0) AND A(N/2)
             462                           SCALE=1.0/FLOAT(N)
             463                           IA=1
             464                           IB=2
             465                           JA=1
             466                           JB=N*INC+1
             467                     CDIR$ IVDEP
             468                     !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             469     1       6s            DO 10 L=1,LOT
             470     1       6m            A(JA)=SCALE*(WORK(IA)+WORK(IB))
             471     1       6m            A(JB)=SCALE*(WORK(IA)-WORK(IB))
             472     1       6s            A(JA+INC)=0.0
             473     1       6s            A(JB+INC)=0.0
             474     1       6v            IA=IA+NX
             475     1       6v            IB=IB+NX
             476     1       6v            JA=JA+JUMP
             477     1       6v            JB=JB+JUMP
             478     1       6v         10 CONTINUE
             479                     C
             480                     C     REMAINING WAVENUMBERS
             481                           SCALE=0.5*SCALE
             482                           IABASE=3
             483                           IBBASE=N-1
             484                           JABASE=2*INC+1
             485                           JBBASE=(N-2)*INC+1
             486                     C
             487     1                     DO 30 K=3,NH,2
             488     1                     IA=IABASE
             489     1                     IB=IBBASE
             490     1                     JA=JABASE
             491     1                     JB=JBBASE
             492     1                     C=TRIGS(N+K)
             493     1                     S=TRIGS(N+K+1)
             494     1               CDIR$ IVDEP
             495     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             496     2       4s            DO 20 L=1,LOT
             497     2       4m            A(JA)=SCALE*((WORK(IA)+WORK(IB))
             498     2                    *   +(C*(WORK(IA+1)+WORK(IB+1))+S*(WORK(IA)-WORK(IB))))
             499     2       4m            A(JB)=SCALE*((WORK(IA)+WORK(IB))
             500     2                    *   -(C*(WORK(IA+1)+WORK(IB+1))+S*(WORK(IA)-WORK(IB))))
             501     2       4m            A(JA+INC)=SCALE*((C*(WORK(IA)-WORK(IB))-S*(WORK(IA+1)+WORK(IB+1)))
             502     2                    *    +(WORK(IB+1)-WORK(IA+1)))
             503     2       4m            A(JB+INC)=SCALE*((C*(WORK(IA)-WORK(IB))-S*(WORK(IA+1)+WORK(IB+1)))
             504     2                    *    -(WORK(IB+1)-WORK(IA+1)))
             505     2       4v            IA=IA+NX
             506     2       4v            IB=IB+NX
             507     2       4v            JA=JA+JUMP
             508     2       4v            JB=JB+JUMP
             509     2       4v         20 CONTINUE
             510     1                     IABASE=IABASE+2
             511     1                     IBBASE=IBBASE-2
             512     1                     JABASE=JABASE+INK
             513     1                     JBBASE=JBBASE-INK
             514     1                  30 CONTINUE
             515                     C
             516                           IF (IABASE.NE.IBBASE) GO TO 50
             517                     C     WAVENUMBER N/4 (IF IT EXISTS)
             518                           IA=IABASE
             519                           JA=JABASE
             520                           SCALE=2.0*SCALE
             521                     CDIR$ IVDEP
             522                     !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             523     1       8s            DO 40 L=1,LOT
             524     1       8m            A(JA)=SCALE*WORK(IA)
             525     1       8m            A(JA+INC)=-SCALE*WORK(IA+1)
             526     1       8v            IA=IA+NX
             527     1       8v            JA=JA+JUMP
             528     1       8v         40 CONTINUE
             529                     C
             530                        50 CONTINUE
             531                           RETURN
             532                           END

 Diagnostic messages: program name(FFT99B)
   jwd8220o-i  "fftx.f", line 451: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "fftx.f", line 469: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 469: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 24.
   jwd6206s-i  "fftx.f", line 470: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JA' in rank '1' of array 'A' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 471: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JB' in rank '1' of array 'A' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 496: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 496: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 32.
   jwd6206s-i  "fftx.f", line 497: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JA' in rank '1' of array 'A' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 499: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JB' in rank '1' of array 'A' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 501: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 503: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "fftx.f", line 523: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 523: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 40.
   jwd6206s-i  "fftx.f", line 524: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'JA' in rank '1' of array 'A' may cause different results from serial execution.

 Procedure information
   Lines      : 82
   Statements : 60
   Stack(byte): 16
   Prefetch num: 0

 Scoping unit of external sub-program : FFT99B
   Attribute and Cross reference of name
     A
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 451  452
      |(Definition)     : 470  471  472  473  497  499  501  503  524  525
      |(Reference)      : 
     C
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 492
      |(Reference)      : 497  499  501  503
     FFT99B
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 451
      |(Reference)      : 
     FLOAT
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 462
     IA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 463  474  488  505  518  526
      |(Reference)      : 470  471  474  497  497  497  499  499  499  501  501  501  503  503  503  505  524  525  526
     IABASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 482  510
      |(Reference)      : 488  510  516  518
     IB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 464  475  489  506
      |(Reference)      : 470  471  475  497  497  497  499  499  499  501  501  501  503  503  503  506
     IBBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 483  511
      |(Reference)      : 489  511  516
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 451
      |(Definition)     : 
      |(Reference)      : 459  459  466  472  473  484  485  501  503  525
     INK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 459
      |(Reference)      : 512  513
     JA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 465  476  490  507  519  527
      |(Reference)      : 470  472  476  497  501  507  524  525  527
     JABASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 484  512
      |(Reference)      : 490  512  519
     JB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 466  477  491  508
      |(Reference)      : 471  473  477  499  503  508
     JBBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 485  513
      |(Reference)      : 491  513
     JUMP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 451
      |(Definition)     : 
      |(Reference)      : 476  477  507  508  527
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 487
      |(Reference)      : 492  493
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 469  496  523
      |(Reference)      : 
     LOT
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 451
      |(Definition)     : 
      |(Reference)      : 469  496  523
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 451
      |(Definition)     : 
      |(Reference)      : 452  452  452  457  458  462  466  483  485  492  493
     NH
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 457
      |(Reference)      : 487
     NX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 458
      |(Reference)      : 474  475  505  506  526
     S
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 493
      |(Reference)      : 497  499  501  503
     SCALE
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 462  481  520
      |(Reference)      : 470  471  481  497  499  501  503  520  524  525
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 451  452
      |(Definition)     : 
      |(Reference)      : 492  493
     WORK
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 451  452
      |(Definition)     : 
      |(Reference)      : 470  470  471  471  497  497  497  497  497  497  499  499  499  499  499  499  501  501  501  501  501  501  503  503  503  503  503  503  524  525
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 478  
                           (Reference)  469
         20  execution     (Definition) 509  
                           (Reference)  496
         30  execution     (Definition) 514  
                           (Reference)  487
         40  execution     (Definition) 528  
                           (Reference)  523
         50  execution     (Definition) 530  
                           (Reference)  516

 External subroutine subprogram "rfftmlt"
  (inc)(line-no.)(nest)(optimize)
             533                     corg  SUBROUTINE FFT991(A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
             534                           SUBROUTINE rfftmlt(A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
             535                           DIMENSION A(N),WORK(N),TRIGS(N),IFAX(1)
             536                     C
             537                     C     SUBROUTINE !FFT991! - MULTIPLE REAL/HALF-COMPLEX PERIODIC
             538                     C     FAST FOURIER TRANSFORM
             539                     C
             540                     C     SAME AS FFT99 EXCEPT THAT ORDERING OF DATA CORRESPONDS TO
             541                     C     THAT IN MRFFT2
             542                     C
             543                     C     PROCEDURE USED TO CONVERT TO HALF-LENGTH COMPLEX TRANSFORM
             544                     C     IS GIVEN BY COOLEY, LEWIS AND WELCH (J. SOUND VIB., VOL. 12
             545                     C     (1970), 315-337)
             546                     C
             547                     C     A IS THE ARRAY CONTAINING INPUT AND OUTPUT DATA
             548                     C     WORK IS AN AREA OF SIZE (N+1)*LOT
             549                     C     TRIGS IS A PREVIOUSLY PREPARED LIST OF TRIG FUNCTION VALUES
             550                     C     IFAX IS A PREVIOUSLY PREPARED LIST OF FACTORS OF N/2
             551                     C     INC IS THE INCREMENT WITHIN EACH DATA 'VECTOR'
             552                     C         (E.G. INC=1 FOR CONSECUTIVELY STORED DATA)
             553                     C     JUMP IS THE INCREMENT BETWEEN THE START OF EACH DATA VECTOR
             554                     C     N IS THE LENGTH OF THE DATA VECTORS
             555                     C     LOT IS THE NUMBER OF DATA VECTORS
             556                     C     ISIGN = +1 FOR TRANSFORM FROM SPECTRAL TO GRIDPOINT
             557                     C           = -1 FOR TRANSFORM FROM GRIDPOINT TO SPECTRAL
             558                     C
             559                     C     ORDERING OF COEFFICIENTS:
             560                     C         A(0),B(0),A(1),B(1),A(2),B(2),...,A(N/2),B(N/2)
             561                     C         WHERE B(0)=B(N/2)=0; (N+2) LOCATIONS REQUIRED
             562                     C
             563                     C     ORDERING OF DATA:
             564                     C         X(0),X(1),X(2),...,X(N-1)
             565                     C
             566                     C     VECTORIZATION IS ACHIEVED ON CRAY BY DOING THE TRANSFORMS IN
             567                     C     PARALLEL
             568                     C
             569                     C     *** N.B. N IS ASSUMED TO BE AN EVEN NUMBER
             570                     C
             571                     C     DEFINITION OF TRANSFORMS:
             572                     C     -------------------------
             573                     C
             574                     C     ISIGN=+1: X(J)=SUM(K=0,...,N-1)(C(K)*EXP(2*I*J*K*PI/N))
             575                     C         WHERE C(K)=A(K)+I*B(K) AND C(N-K)=A(K)-I*B(K)
             576                     C
             577                     C     ISIGN=-1: A(K)=(1/N)*SUM(J=0,...,N-1)(X(J)*COS(2*J*K*PI/N))
             578                     C               B(K)=-(1/N)*SUM(J=0,...,N-1)(X(J)*SIN(2*J*K*PI/N))
             579                     C
             580                     C THE FOLLOWING CALL IS FOR MONITORING LIBRARY USE AT NCAR
             581                     c      CALL Q8QST4 ( 4HXLIB, 6HFFT99F, 6HFFT991, 10HVERSION 01)
             582                           NFAX=IFAX(1)
             583                           NX=N+1
             584                           NH=N/2
             585                           INK=INC+INC
             586                           IF (ISIGN.EQ.+1) GO TO 30
             587                     C
             588                     C     IF NECESSARY, TRANSFER DATA TO WORK AREA
             589                           IGO=50
             590                           IF (MOD(NFAX,2).EQ.1) GOTO 40
             591                           IBASE=1
             592                           JBASE=1
             593     1                     DO 20 L=1,LOT
             594     1                     I=IBASE
             595     1                     J=JBASE
             596     1               CDIR$ IVDEP
             597     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             598     2       8v            DO 10 M=1,N
             599     2       8v            WORK(J)=A(I)
             600     2       8v            I=I+INC
             601     2       8v            J=J+1
             602     2       8v         10 CONTINUE
             603     1                     IBASE=IBASE+JUMP
             604     1                     JBASE=JBASE+NX
             605     1                  20 CONTINUE
             606                     C
             607                           IGO=60
             608                           GO TO 40
             609                     C
             610                     C     PREPROCESSING (ISIGN=+1)
             611                     C     ------------------------
             612                     C
             613                        30 CONTINUE
             614                           CALL FFT99A(A,WORK,TRIGS,INC,JUMP,N,LOT)
             615                           IGO=60
             616                     C
             617                     C     COMPLEX TRANSFORM
             618                     C     -----------------
             619                     C
             620                        40 CONTINUE
             621                           IA=1
             622                           LA=1
             623     1       4s            DO 80 K=1,NFAX
             624     1       4s            IF (IGO.EQ.60) GO TO 60
             625     1       4s         50 CONTINUE
             626     1       4s            CALL VPASSM(A(IA),A(IA+INC),WORK(1),WORK(2),TRIGS,
             627     1                    *   INK,2,JUMP,NX,LOT,NH,IFAX(K+1),LA)
             628     1       4s            IGO=60
             629     1       4s            GO TO 70
             630     1       4s         60 CONTINUE
             631     1       4s            CALL VPASSM(WORK(1),WORK(2),A(IA),A(IA+INC),TRIGS,
             632     1                    *    2,INK,NX,JUMP,LOT,NH,IFAX(K+1),LA)
             633     1       4s            IGO=50
             634     1       4s         70 CONTINUE
             635     1       4s            LA=LA*IFAX(K+1)
             636     1       4s         80 CONTINUE
             637                     C
             638                           IF (ISIGN.EQ.-1) GO TO 130
             639                     C
             640                     C     IF NECESSARY, TRANSFER DATA FROM WORK AREA
             641                           IF (MOD(NFAX,2).EQ.1) GO TO 110
             642                           IBASE=1
             643                           JBASE=1
             644     1                     DO 100 L=1,LOT
             645     1                     I=IBASE
             646     1                     J=JBASE
             647     1               CDIR$ IVDEP
             648     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             649     2       8v            DO 90 M=1,N
             650     2       8v            A(J)=WORK(I)
             651     2       8v            I=I+1
             652     2       8v            J=J+INC
             653     2       8v         90 CONTINUE
             654     1                     IBASE=IBASE+NX
             655     1                     JBASE=JBASE+JUMP
             656     1                 100 CONTINUE
             657                     C
             658                     C     FILL IN ZEROS AT END
             659                       110 CONTINUE
             660                           IB=N*INC+1
             661                     CDIR$ IVDEP
             662                     !ocl novrec
             663     1       8s            DO 120 L=1,LOT
             664     1       8s            A(IB)=0.0
             665     1       8s            A(IB+INC)=0.0
             666     1       8s            IB=IB+JUMP
             667     1       8s        120 CONTINUE
             668                           GO TO 140
             669                     C
             670                     C     POSTPROCESSING (ISIGN=-1):
             671                     C     --------------------------
             672                     C
             673                       130 CONTINUE
             674                           CALL FFT99B(WORK,A,TRIGS,INC,JUMP,N,LOT)
             675                     C
             676                       140 CONTINUE
             677                           RETURN
             678                           END

 Diagnostic messages: program name(rfftmlt)
   jwd6001s-i  "fftx.f", line 598: SIMD conversion is applied to DO loop with DO variable 'M'.
   jwd8204o-i  "fftx.f", line 598: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 598: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 32.
   jwd6123s-i  "fftx.f", line 623: SIMD conversion cannot be applied to DO loop: a data with restricted type was found in the DO loop.
   jwd6229s-i  "fftx.f", line 623: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8664o-i  "fftx.f", line 623: This loop is not software pipelined because the loop contains an instruction not covered by software pipelining, such as function call.
   jwd8202o-i  "fftx.f", line 623: Loop unrolled 4 times.
   jwd6202s-i  "fftx.f", line 624: SIMD conversion cannot be applied to DO loop: data dependency of variable 'IGO' may cause different results from serial execution for loop.
   jwd6208s-i  "fftx.f", line 625: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUMP' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 625: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 625: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'INK' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'NH' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'TRIGS' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LA' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'NX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUMP' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'WORK' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'A' may be different from the order of data references in serial execution.
   jwd6122s-i  "fftx.f", line 626: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6208s-i  "fftx.f", line 631: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUMP' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 631: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 631: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6122s-i  "fftx.f", line 631: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6202s-i  "fftx.f", line 635: SIMD conversion cannot be applied to DO loop: data dependency of variable 'LA' may cause different results from serial execution for loop.
   jwd6208s-i  "fftx.f", line 635: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6001s-i  "fftx.f", line 649: SIMD conversion is applied to DO loop with DO variable 'M'.
   jwd8204o-i  "fftx.f", line 649: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 649: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8663o-i  "fftx.f", line 663: This loop is not software pipelined because software pipelining is worthless for this loop.
   jwd8202o-i  "fftx.f", line 663: Loop unrolled 8 times.
   jwd6206s-i  "fftx.f", line 664: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'IB' in rank '1' of array 'A' may cause different results from serial execution.

 Procedure information
   Lines      : 146
   Statements : 70
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : rfftmlt
   Attribute and Cross reference of name
     A
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 534  535
      |(Definition)     : 614  626  626  631  631  650  664  665  674
      |(Reference)      : 599
     FFT99A
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 614
     FFT99B
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 674
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 594  600  645  651
      |(Reference)      : 599  600  650  651
     IA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 621
      |(Reference)      : 626  626  631  631
     IB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 660  666
      |(Reference)      : 664  665  666
     IBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 591  603  642  654
      |(Reference)      : 594  603  645  654
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 534  535
      |(Definition)     : 626  631
      |(Reference)      : 582  635
     IGO
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 589  607  615  628  633
      |(Reference)      : 624
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 534
      |(Definition)     : 614  674
      |(Reference)      : 585  585  600  626  631  652  660  665
     INK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 585  626  631
      |(Reference)      : 
     ISIGN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 534
      |(Definition)     : 
      |(Reference)      : 586  638
     J
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 595  601  646  652
      |(Reference)      : 599  601  650  652
     JBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 592  604  643  655
      |(Reference)      : 595  604  646  655
     JUMP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 534
      |(Definition)     : 614  626  631  674
      |(Reference)      : 603  655  666
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 623
      |(Reference)      : 626  631  635
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 593  644  663
      |(Reference)      : 
     LA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 622  626  631  635
      |(Reference)      : 635
     LOT
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 534
      |(Definition)     : 614  626  631  674
      |(Reference)      : 593  644  663
     M
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 598  649
      |(Reference)      : 
     MOD
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 590  641
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 534
      |(Definition)     : 614  674
      |(Reference)      : 535  535  535  583  584  598  649  660
     NFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 582
      |(Reference)      : 590  623  641
     NH
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 584  626  631
      |(Reference)      : 
     NX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 583  626  631
      |(Reference)      : 604  654
     rfftmlt
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 534
      |(Reference)      : 
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 534  535
      |(Definition)     : 614  626  631  674
      |(Reference)      : 
     VPASSM
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 626  631
     WORK
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 534  535
      |(Definition)     : 599  614  626  626  631  631  674
      |(Reference)      : 650
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 602  
                           (Reference)  598
         20  execution     (Definition) 605  
                           (Reference)  593
         30  execution     (Definition) 613  
                           (Reference)  586
         40  execution     (Definition) 620  
                           (Reference)  590  608
         50  execution     (Definition) 625
         60  execution     (Definition) 630  
                           (Reference)  624
         70  execution     (Definition) 634  
                           (Reference)  629
         80  execution     (Definition) 636  
                           (Reference)  623
         90  execution     (Definition) 653  
                           (Reference)  649
        100  execution     (Definition) 656  
                           (Reference)  644
        110  execution     (Definition) 659  
                           (Reference)  641
        120  execution     (Definition) 667  
                           (Reference)  663
        130  execution     (Definition) 673  
                           (Reference)  638
        140  execution     (Definition) 676  
                           (Reference)  668

 External subroutine subprogram "FFTFAX"
  (inc)(line-no.)(nest)(optimize)
             679                           SUBROUTINE FFTFAX(N,IFAX,TRIGS)
             680                     cfj append for myrank >>
             681                           include '../include/rank.h'
     1         1                           common/mpe_comm/nsize, myrank
             682                     cfj <<
             683                           DIMENSION IFAX(13),TRIGS(1)
             684                     C
             685                     C MODE 3 IS USED FOR REAL/HALF-COMPLEX TRANSFORMS.  IT IS POSSIBLE
             686                     C TO DO COMPLEX/COMPLEX TRANSFORMS WITH OTHER VALUES OF MODE, BUT
             687                     C DOCUMENTATION OF THE DETAILS WERE NOT AVAILABLE WHEN THIS ROUTINE
             688                     C WAS WRITTEN.
             689                     C
             690                           DATA MODE /3/
             691                           CALL FAX (IFAX, N, MODE)
             692                           I = IFAX(1)
             693                           IF (IFAX(I+1) .GT. 5 .OR. N .LE. 4) IFAX(1) = -99
             694                     cfj Change to print only RANK 0 PE >>
             695     1                     if(myrank .eq. 0) then
             696     1                     IF (IFAX(1) .LE. 0 ) PRINT *,'FFTFAX -- INVALID N'
             697     1                     endif
             698                     cfj <<
             699                     c      CALL ULIBER(33, ' FFTFAX -- INVALID N', 20)
             700                           CALL FFTRIG (TRIGS, N, MODE)
             701                           RETURN
             702                           END

 Procedure information
   Lines      : 25
   Statements : 13
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : FFTFAX
   Attribute and Cross reference of name
     FAX
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 691
     FFTFAX
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 679
      |(Reference)      : 
     FFTRIG
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 700
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 692
      |(Reference)      : 693
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 679  683
      |(Definition)     : 691  693
      |(Reference)      : 692  693  696
     MODE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 690
      |(Definition)     : 691  700
      |(Reference)      : 
     mpe_comm
      |(Class and Type) : common name
      |(Attributes)     : 
      |(Declaration)    : 1-1
      |(Definition)     : 
      |(Reference)      : 
     myrank
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : common-block-object
      |(Declaration)    : 1-1
      |(Definition)     : 
      |(Reference)      : 695
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 679
      |(Definition)     : 691  700
      |(Reference)      : 693
     nsize
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : common-block-object
      |(Declaration)    : 1-1
      |(Definition)     : 
      |(Reference)      : 
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 679  683
      |(Definition)     : 700
      |(Reference)      : 

 External subroutine subprogram "FAX"
  (inc)(line-no.)(nest)(optimize)
             703                           SUBROUTINE FAX(IFAX,N,MODE)
             704                           DIMENSION IFAX(10)
             705                           NN=N
             706                           IF (IABS(MODE).EQ.1) GO TO 10
             707                           IF (IABS(MODE).EQ.8) GO TO 10
             708                           NN=N/2
             709                           IF ((NN+NN).EQ.N) GO TO 10
             710                           IFAX(1)=-99
             711                           RETURN
             712                        10 K=1
             713                     C     TEST FOR FACTORS OF 4
             714                        20 IF (MOD(NN,4).NE.0) GO TO 30
             715                           K=K+1
             716                           IFAX(K)=4
             717                           NN=NN/4
             718                           IF (NN.EQ.1) GO TO 80
             719                           GO TO 20
             720                     C     TEST FOR EXTRA FACTOR OF 2
             721                        30 IF (MOD(NN,2).NE.0) GO TO 40
             722                           K=K+1
             723                           IFAX(K)=2
             724                           NN=NN/2
             725                           IF (NN.EQ.1) GO TO 80
             726                     C     TEST FOR FACTORS OF 3
             727                        40 IF (MOD(NN,3).NE.0) GO TO 50
             728                           K=K+1
             729                           IFAX(K)=3
             730                           NN=NN/3
             731                           IF (NN.EQ.1) GO TO 80
             732                           GO TO 40
             733                     C     NOW FIND REMAINING FACTORS
             734                        50 L=5
             735                           INC=2
             736                     C     INC ALTERNATELY TAKES ON VALUES 2 AND 4
             737                        60 IF (MOD(NN,L).NE.0) GO TO 70
             738                           K=K+1
             739                           IFAX(K)=L
             740                           NN=NN/L
             741                           IF (NN.EQ.1) GO TO 80
             742                           GO TO 60
             743                        70 L=L+INC
             744                           INC=6-INC
             745                           GO TO 60
             746                        80 IFAX(1)=K-1
             747                     C     IFAX(1) CONTAINS NUMBER OF FACTORS
             748                           NFAX=IFAX(1)
             749                     C     SORT FACTORS INTO ASCENDING ORDER
             750                           IF (NFAX.EQ.1) GO TO 110
             751     1                     DO 100 II=2,NFAX
             752     1                     ISTOP=NFAX+2-II
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH       : 16
                                   <<<      IFAX: 16
                                   <<< Loop-information  End >>>
             753     2       8s            DO 90 I=2,ISTOP
             754     2       8s            IF (IFAX(I+1).GE.IFAX(I)) GO TO 90
             755     2       8s            ITEM=IFAX(I)
             756     2       8s            IFAX(I)=IFAX(I+1)
             757     2       8s            IFAX(I+1)=ITEM
             758     2       8s         90 CONTINUE
             759     1                 100 CONTINUE
             760                       110 CONTINUE
             761                           RETURN
             762                           END

 Diagnostic messages: program name(FAX)
   jwd6132s-i  "fftx.f", line 714: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.
   jwd6132s-i  "fftx.f", line 727: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.
   jwd6132s-i  "fftx.f", line 737: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.
   jwd6123s-i  "fftx.f", line 753: SIMD conversion cannot be applied to DO loop: a data with restricted type was found in the DO loop.
   jwd6229s-i  "fftx.f", line 753: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "fftx.f", line 753: This loop is not software pipelined because the loop contains a branch instruction which is not for loop iteration.
   jwd8202o-i  "fftx.f", line 753: Loop unrolled 8 times.
   jwd6202s-i  "fftx.f", line 754: SIMD conversion cannot be applied to DO loop: data dependency of variable 'IFAX' may cause different results from serial execution for loop.

 Procedure information
   Lines      : 60
   Statements : 53
   Stack(byte): 0
   Prefetch num: 16

 Scoping unit of external sub-program : FAX
   Attribute and Cross reference of name
     FAX
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 703
      |(Reference)      : 
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 753
      |(Reference)      : 754  754  755  756  756  757
     IABS
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 706  707
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 703  704
      |(Definition)     : 710  716  723  729  739  746  756  757
      |(Reference)      : 748  754  754  755  756
     II
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 751
      |(Reference)      : 752
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 735  744
      |(Reference)      : 743  744
     ISTOP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 752
      |(Reference)      : 753
     ITEM
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 755
      |(Reference)      : 757
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 712  715  722  728  738
      |(Reference)      : 715  716  722  723  728  729  738  739  746
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 734  743
      |(Reference)      : 737  739  740  743
     MOD
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 714  721  727  737
     MODE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 703
      |(Definition)     : 
      |(Reference)      : 706  707
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 703
      |(Definition)     : 
      |(Reference)      : 705  708  709
     NFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 748
      |(Reference)      : 750  751  752
     NN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 705  708  717  724  730  740
      |(Reference)      : 709  709  714  717  718  721  724  725  727  730  731  737  740  741
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 712  
                           (Reference)  706  707  709
         20  execution     (Definition) 714  
                           (Reference)  719
         30  execution     (Definition) 721  
                           (Reference)  714
         40  execution     (Definition) 727  
                           (Reference)  721  732
         50  execution     (Definition) 734  
                           (Reference)  727
         60  execution     (Definition) 737  
                           (Reference)  742  745
         70  execution     (Definition) 743  
                           (Reference)  737
         80  execution     (Definition) 746  
                           (Reference)  718  725  731  741
         90  execution     (Definition) 758  
                           (Reference)  753  754
        100  execution     (Definition) 759  
                           (Reference)  751
        110  execution     (Definition) 760  
                           (Reference)  750

 External subroutine subprogram "FFTRIG"
  (inc)(line-no.)(nest)(optimize)
             763                           SUBROUTINE FFTRIG(TRIGS,N,MODE)
             764                           DIMENSION TRIGS(1)
             765                           PI=2.0*ASIN(1.0)
             766                           IMODE=IABS(MODE)
             767                           NN=N
             768                           IF (IMODE.GT.1.AND.IMODE.LT.6) NN=N/2
             769                           DEL=(PI+PI)/FLOAT(NN)
             770                           L=NN+NN
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             771     1        v            DO 10 I=1,L,2
             772     1        v            ANGLE=0.5*FLOAT(I-1)*DEL
             773     1        v            TRIGS(I)=COS(ANGLE)
             774     1        v            TRIGS(I+1)=SIN(ANGLE)
             775     1        v         10 CONTINUE
             776                           IF (IMODE.EQ.1) RETURN
             777                           IF (IMODE.EQ.8) RETURN
             778                           DEL=0.5*DEL
             779                           NH=(NN+1)/2
             780                           L=NH+NH
             781                           LA=NN+NN
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             782     1        v            DO 20 I=1,L,2
             783     1        v            ANGLE=0.5*FLOAT(I-1)*DEL
             784     1        v            TRIGS(LA+I)=COS(ANGLE)
             785     1        v            TRIGS(LA+I+1)=SIN(ANGLE)
             786     1        v         20 CONTINUE
             787                           IF (IMODE.LE.3) RETURN
             788                           DEL=0.5*DEL
             789                           LA=LA+NN
             790                           IF (MODE.EQ.5) GO TO 40
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             791     1       4v            DO 30 I=2,NN
             792     1       4v            ANGLE=FLOAT(I-1)*DEL
             793     1       4v            TRIGS(LA+I)=2.0*SIN(ANGLE)
             794     1       4v         30 CONTINUE
             795                           RETURN
             796                        40 CONTINUE
             797                           DEL=0.5*DEL
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             798     1       4v            DO 50 I=2,N
             799     1       4v            ANGLE=FLOAT(I-1)*DEL
             800     1       4v            TRIGS(LA+I)=SIN(ANGLE)
             801     1       4v         50 CONTINUE
             802                           RETURN
             803                           END

 Diagnostic messages: program name(FFTRIG)
   jwd8220o-i  "fftx.f", line 763: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "fftx.f", line 771: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "fftx.f", line 771: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 771: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 42.
   jwd8209o-i  "fftx.f", line 772: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "fftx.f", line 782: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "fftx.f", line 782: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 782: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 42.
   jwd8209o-i  "fftx.f", line 783: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6001s-i  "fftx.f", line 791: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "fftx.f", line 791: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 791: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 89.
   jwd6001s-i  "fftx.f", line 798: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "fftx.f", line 798: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 798: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 97.

 Procedure information
   Lines      : 41
   Statements : 41
   Stack(byte): 32
   Prefetch num: 0

 Scoping unit of external sub-program : FFTRIG
   Attribute and Cross reference of name
     ANGLE
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 772  783  792  799
      |(Reference)      : 773  774  784  785  793  800
     ASIN
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 765
     COS
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 773  784
     DEL
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 769  778  788  797
      |(Reference)      : 772  778  783  788  792  797  799
     FFTRIG
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 763
      |(Reference)      : 
     FLOAT
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 769  772  783  792  799
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 771  782  791  798
      |(Reference)      : 772  773  774  783  784  785  792  793  799  800
     IABS
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 766
     IMODE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 766
      |(Reference)      : 768  768  776  777  787
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 770  780
      |(Reference)      : 771  782
     LA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 781  789
      |(Reference)      : 784  785  789  793  800
     MODE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 763
      |(Definition)     : 
      |(Reference)      : 766  790
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 763
      |(Definition)     : 
      |(Reference)      : 767  768  798
     NH
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 779
      |(Reference)      : 780  780
     NN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 767  768
      |(Reference)      : 769  770  770  779  781  781  789  791
     PI
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 765
      |(Reference)      : 769  769
     SIN
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 774  785  793  800
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 763  764
      |(Definition)     : 773  774  784  785  793  800
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 775  
                           (Reference)  771
         20  execution     (Definition) 786  
                           (Reference)  782
         30  execution     (Definition) 794  
                           (Reference)  791
         40  execution     (Definition) 796  
                           (Reference)  790
         50  execution     (Definition) 801  
                           (Reference)  798

 External subroutine subprogram "VPASSM"
  (inc)(line-no.)(nest)(optimize)
             804                           SUBROUTINE VPASSM(A,B,C,D,TRIGS,INC1,INC2,INC3,INC4,LOT,N,IFAC,LA)
             805                           DIMENSION A(N),B(N),C(N),D(N),TRIGS(N)
             806                     C
             807                     C     SUBROUTINE !VPASSM! - MULTIPLE VERSION OF !VPASSA!
             808                     C     PERFORMS ONE PASS THROUGH DATA
             809                     C     AS PART OF MULTIPLE COMPLEX FFT ROUTINE
             810                     C     A IS FIRST REAL INPUT VECTOR
             811                     C     B IS FIRST IMAGINARY INPUT VECTOR
             812                     C     C IS FIRST REAL OUTPUT VECTOR
             813                     C     D IS FIRST IMAGINARY OUTPUT VECTOR
             814                     C     TRIGS IS PRECALCULATED TABLE OF SINES ! COSINES
             815                     C     INC1 IS ADDRESSING INCREMENT FOR A AND B
             816                     C     INC2 IS ADDRESSING INCREMENT FOR C AND D
             817                     C     INC3 IS ADDRESSING INCREMENT BETWEEN A!S ^ B!S
             818                     C     INC4 IS ADDRESSING INCREMENT BETWEEN C!S ^ D!S
             819                     C     LOT IS THE NUMBER OF VECTORS
             820                     C     N IS LENGTH OF VECTORS
             821                     C     IFAC IS CURRENT FACTOR OF N
             822                     C     LA IS PRODUCT OF PREVIOUS FACTORS
             823                     C
             824                           DATA SIN36/0.587785252292473/,COS36/0.809016994374947/,
             825                          *     SIN72/0.951056516295154/,COS72/0.309016994374947/,
             826                          *     SIN60/0.866025403784437/
             827                     C
             828                           M=N/IFAC
             829                           IINK=M*INC1
             830                           JINK=LA*INC2
             831                           JUMP=(IFAC-1)*JINK
             832                           IBASE=0
             833                           JBASE=0
             834                           IGO=IFAC-1
             835                           IF (IGO.GT.4) RETURN
             836                           GO TO (10,50,90,130),IGO
             837                     C
             838                     C     CODING FOR FACTOR 2
             839                     C
             840                        10 IA=1
             841                           JA=1
             842                           IB=IA+IINK
             843                           JB=JA+JINK
             844     1                     DO 20 L=1,LA
             845     1                     I=IBASE
             846     1                     J=JBASE
             847     1               CDIR$ IVDEP
             848     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             849     2       4s            DO 15 IJK=1,LOT
             850     2       4m            C(JA+J)=A(IA+I)+A(IB+I)
             851     2       4m            D(JA+J)=B(IA+I)+B(IB+I)
             852     2       4m            C(JB+J)=A(IA+I)-A(IB+I)
             853     2       4m            D(JB+J)=B(IA+I)-B(IB+I)
             854     2       4v            I=I+INC3
             855     2       4v            J=J+INC4
             856     2       4v         15 CONTINUE
             857     1                     IBASE=IBASE+INC1
             858     1                     JBASE=JBASE+INC2
             859     1                  20 CONTINUE
             860                           IF (LA.EQ.M) RETURN
             861                           LA1=LA+1
             862                           JBASE=JBASE+JUMP
             863     1                     DO 40 K=LA1,M,LA
             864     1                     KB=K+K-2
             865     1                     C1=TRIGS(KB+1)
             866     1                     S1=TRIGS(KB+2)
             867     2                     DO 30 L=1,LA
             868     2                     I=IBASE
             869     2                     J=JBASE
             870     2               CDIR$ IVDEP
             871     2               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             872     3       4s            DO 25 IJK=1,LOT
             873     3       4m            C(JA+J)=A(IA+I)+A(IB+I)
             874     3       4m            D(JA+J)=B(IA+I)+B(IB+I)
             875     3       4m            C(JB+J)=C1*(A(IA+I)-A(IB+I))-S1*(B(IA+I)-B(IB+I))
             876     3       4m            D(JB+J)=S1*(A(IA+I)-A(IB+I))+C1*(B(IA+I)-B(IB+I))
             877     3       4v            I=I+INC3
             878     3       4v            J=J+INC4
             879     3       4v         25 CONTINUE
             880     2                     IBASE=IBASE+INC1
             881     2                     JBASE=JBASE+INC2
             882     2                  30 CONTINUE
             883     1                     JBASE=JBASE+JUMP
             884     1                  40 CONTINUE
             885                           RETURN
             886                     C
             887                     C     CODING FOR FACTOR 3
             888                     C
             889                        50 IA=1
             890                           JA=1
             891                           IB=IA+IINK
             892                           JB=JA+JINK
             893                           IC=IB+IINK
             894                           JC=JB+JINK
             895     1                     DO 60 L=1,LA
             896     1                     I=IBASE
             897     1                     J=JBASE
             898     1               CDIR$ IVDEP
             899     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             900     2       4s            DO 55 IJK=1,LOT
             901     2       4m            C(JA+J)=A(IA+I)+(A(IB+I)+A(IC+I))
             902     2       4m            D(JA+J)=B(IA+I)+(B(IB+I)+B(IC+I))
             903     2       4m            C(JB+J)=(A(IA+I)-0.5*(A(IB+I)+A(IC+I)))-(SIN60*(B(IB+I)-B(IC+I)))
             904     2       4m            C(JC+J)=(A(IA+I)-0.5*(A(IB+I)+A(IC+I)))+(SIN60*(B(IB+I)-B(IC+I)))
             905     2       4m            D(JB+J)=(B(IA+I)-0.5*(B(IB+I)+B(IC+I)))+(SIN60*(A(IB+I)-A(IC+I)))
             906     2       4m            D(JC+J)=(B(IA+I)-0.5*(B(IB+I)+B(IC+I)))-(SIN60*(A(IB+I)-A(IC+I)))
             907     2       4v            I=I+INC3
             908     2       4v            J=J+INC4
             909     2       4v         55 CONTINUE
             910     1                     IBASE=IBASE+INC1
             911     1                     JBASE=JBASE+INC2
             912     1                  60 CONTINUE
             913                           IF (LA.EQ.M) RETURN
             914                           LA1=LA+1
             915                           JBASE=JBASE+JUMP
             916     1                     DO 80 K=LA1,M,LA
             917     1                     KB=K+K-2
             918     1                     KC=KB+KB
             919     1                     C1=TRIGS(KB+1)
             920     1                     S1=TRIGS(KB+2)
             921     1                     C2=TRIGS(KC+1)
             922     1                     S2=TRIGS(KC+2)
             923     2                     DO 70 L=1,LA
             924     2                     I=IBASE
             925     2                     J=JBASE
             926     2               CDIR$ IVDEP
             927     2               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             928     3       2s            DO 65 IJK=1,LOT
             929     3       2m            C(JA+J)=A(IA+I)+(A(IB+I)+A(IC+I))
             930     3       2m            D(JA+J)=B(IA+I)+(B(IB+I)+B(IC+I))
             931     3       2m            C(JB+J)=
             932     3                    *    C1*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))-(SIN60*(B(IB+I)-B(IC+I))))
             933     3                    *   -S1*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))+(SIN60*(A(IB+I)-A(IC+I))))
             934     3       2m            D(JB+J)=
             935     3                    *    S1*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))-(SIN60*(B(IB+I)-B(IC+I))))
             936     3                    *   +C1*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))+(SIN60*(A(IB+I)-A(IC+I))))
             937     3       2m            C(JC+J)=
             938     3                    *    C2*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))+(SIN60*(B(IB+I)-B(IC+I))))
             939     3                    *   -S2*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))-(SIN60*(A(IB+I)-A(IC+I))))
             940     3       2m            D(JC+J)=
             941     3                    *    S2*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))+(SIN60*(B(IB+I)-B(IC+I))))
             942     3                    *   +C2*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))-(SIN60*(A(IB+I)-A(IC+I))))
             943     3       2v            I=I+INC3
             944     3       2v            J=J+INC4
             945     3       2v         65 CONTINUE
             946     2                     IBASE=IBASE+INC1
             947     2                     JBASE=JBASE+INC2
             948     2                  70 CONTINUE
             949     1                     JBASE=JBASE+JUMP
             950     1                  80 CONTINUE
             951                           RETURN
             952                     C
             953                     C     CODING FOR FACTOR 4
             954                     C
             955                        90 IA=1
             956                           JA=1
             957                           IB=IA+IINK
             958                           JB=JA+JINK
             959                           IC=IB+IINK
             960                           JC=JB+JINK
             961                           ID=IC+IINK
             962                           JD=JC+JINK
             963     1                     DO 100 L=1,LA
             964     1                     I=IBASE
             965     1                     J=JBASE
             966     1               CDIR$ IVDEP
             967     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             968     2       2s            DO 95 IJK=1,LOT
             969     2       2m            C(JA+J)=(A(IA+I)+A(IC+I))+(A(IB+I)+A(ID+I))
             970     2       2m            C(JC+J)=(A(IA+I)+A(IC+I))-(A(IB+I)+A(ID+I))
             971     2       2m            D(JA+J)=(B(IA+I)+B(IC+I))+(B(IB+I)+B(ID+I))
             972     2       2m            D(JC+J)=(B(IA+I)+B(IC+I))-(B(IB+I)+B(ID+I))
             973     2       2m            C(JB+J)=(A(IA+I)-A(IC+I))-(B(IB+I)-B(ID+I))
             974     2       2m            C(JD+J)=(A(IA+I)-A(IC+I))+(B(IB+I)-B(ID+I))
             975     2       2m            D(JB+J)=(B(IA+I)-B(IC+I))+(A(IB+I)-A(ID+I))
             976     2       2m            D(JD+J)=(B(IA+I)-B(IC+I))-(A(IB+I)-A(ID+I))
             977     2       2v            I=I+INC3
             978     2       2v            J=J+INC4
             979     2       2v         95 CONTINUE
             980     1                     IBASE=IBASE+INC1
             981     1                     JBASE=JBASE+INC2
             982     1                 100 CONTINUE
             983                           IF (LA.EQ.M) RETURN
             984                           LA1=LA+1
             985                           JBASE=JBASE+JUMP
             986     1                     DO 120 K=LA1,M,LA
             987     1                     KB=K+K-2
             988     1                     KC=KB+KB
             989     1                     KD=KC+KB
             990     1                     C1=TRIGS(KB+1)
             991     1                     S1=TRIGS(KB+2)
             992     1                     C2=TRIGS(KC+1)
             993     1                     S2=TRIGS(KC+2)
             994     1                     C3=TRIGS(KD+1)
             995     1                     S3=TRIGS(KD+2)
             996     2                     DO 110 L=1,LA
             997     2                     I=IBASE
             998     2                     J=JBASE
             999     2               CDIR$ IVDEP
            1000     2               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1001     3       2s            DO 105 IJK=1,LOT
            1002     3       2m            C(JA+J)=(A(IA+I)+A(IC+I))+(A(IB+I)+A(ID+I))
            1003     3       2m            D(JA+J)=(B(IA+I)+B(IC+I))+(B(IB+I)+B(ID+I))
            1004     3       2m            C(JC+J)=
            1005     3                    *    C2*((A(IA+I)+A(IC+I))-(A(IB+I)+A(ID+I)))
            1006     3                    *   -S2*((B(IA+I)+B(IC+I))-(B(IB+I)+B(ID+I)))
            1007     3       2m            D(JC+J)=
            1008     3                    *    S2*((A(IA+I)+A(IC+I))-(A(IB+I)+A(ID+I)))
            1009     3                    *   +C2*((B(IA+I)+B(IC+I))-(B(IB+I)+B(ID+I)))
            1010     3       2m            C(JB+J)=
            1011     3                    *    C1*((A(IA+I)-A(IC+I))-(B(IB+I)-B(ID+I)))
            1012     3                    *   -S1*((B(IA+I)-B(IC+I))+(A(IB+I)-A(ID+I)))
            1013     3       2m            D(JB+J)=
            1014     3                    *    S1*((A(IA+I)-A(IC+I))-(B(IB+I)-B(ID+I)))
            1015     3                    *   +C1*((B(IA+I)-B(IC+I))+(A(IB+I)-A(ID+I)))
            1016     3       2m            C(JD+J)=
            1017     3                    *    C3*((A(IA+I)-A(IC+I))+(B(IB+I)-B(ID+I)))
            1018     3                    *   -S3*((B(IA+I)-B(IC+I))-(A(IB+I)-A(ID+I)))
            1019     3       2m            D(JD+J)=
            1020     3                    *    S3*((A(IA+I)-A(IC+I))+(B(IB+I)-B(ID+I)))
            1021     3                    *   +C3*((B(IA+I)-B(IC+I))-(A(IB+I)-A(ID+I)))
            1022     3       2v            I=I+INC3
            1023     3       2v            J=J+INC4
            1024     3       2v        105 CONTINUE
            1025     2                     IBASE=IBASE+INC1
            1026     2                     JBASE=JBASE+INC2
            1027     2                 110 CONTINUE
            1028     1                     JBASE=JBASE+JUMP
            1029     1                 120 CONTINUE
            1030                           RETURN
            1031                     C
            1032                     C     CODING FOR FACTOR 5
            1033                     C
            1034                       130 IA=1
            1035                           JA=1
            1036                           IB=IA+IINK
            1037                           JB=JA+JINK
            1038                           IC=IB+IINK
            1039                           JC=JB+JINK
            1040                           ID=IC+IINK
            1041                           JD=JC+JINK
            1042                           IE=ID+IINK
            1043                           JE=JD+JINK
            1044     1                     DO 140 L=1,LA
            1045     1                     I=IBASE
            1046     1                     J=JBASE
            1047     1               CDIR$ IVDEP
            1048     1               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1049     2       2s            DO 135 IJK=1,LOT
            1050     2       2m            C(JA+J)=A(IA+I)+(A(IB+I)+A(IE+I))+(A(IC+I)+A(ID+I))
            1051     2       2m            D(JA+J)=B(IA+I)+(B(IB+I)+B(IE+I))+(B(IC+I)+B(ID+I))
            1052     2       2m            C(JB+J)=(A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
            1053     2                    *  -(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I)))
            1054     2       2m            C(JE+J)=(A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
            1055     2                    *  +(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I)))
            1056     2       2m            D(JB+J)=(B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
            1057     2                    *  +(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I)))
            1058     2       2m            D(JE+J)=(B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
            1059     2                    *  -(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I)))
            1060     2       2m            C(JC+J)=(A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
            1061     2                    *  -(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I)))
            1062     2       2m            C(JD+J)=(A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
            1063     2                    *  +(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I)))
            1064     2       2m            D(JC+J)=(B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
            1065     2                    *  +(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I)))
            1066     2       2m            D(JD+J)=(B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
            1067     2                    *  -(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I)))
            1068     2       2v            I=I+INC3
            1069     2       2v            J=J+INC4
            1070     2       2v        135 CONTINUE
            1071     1                     IBASE=IBASE+INC1
            1072     1                     JBASE=JBASE+INC2
            1073     1                 140 CONTINUE
            1074                           IF (LA.EQ.M) RETURN
            1075                           LA1=LA+1
            1076                           JBASE=JBASE+JUMP
            1077     1                     DO 160 K=LA1,M,LA
            1078     1                     KB=K+K-2
            1079     1                     KC=KB+KB
            1080     1                     KD=KC+KB
            1081     1                     KE=KD+KB
            1082     1                     C1=TRIGS(KB+1)
            1083     1                     S1=TRIGS(KB+2)
            1084     1                     C2=TRIGS(KC+1)
            1085     1                     S2=TRIGS(KC+2)
            1086     1                     C3=TRIGS(KD+1)
            1087     1                     S3=TRIGS(KD+2)
            1088     1                     C4=TRIGS(KE+1)
            1089     1                     S4=TRIGS(KE+2)
            1090     2                     DO 150 L=1,LA
            1091     2                     I=IBASE
            1092     2                     J=JBASE
            1093     2               CDIR$ IVDEP
            1094     2               !ocl novrec
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1095     3        s            DO 145 IJK=1,LOT
            1096     3        m            C(JA+J)=A(IA+I)+(A(IB+I)+A(IE+I))+(A(IC+I)+A(ID+I))
            1097     3        m            D(JA+J)=B(IA+I)+(B(IB+I)+B(IE+I))+(B(IC+I)+B(ID+I))
            1098     3        m            C(JB+J)=
            1099     3                    *    C1*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
            1100     3                    *      -(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
            1101     3                    *   -S1*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
            1102     3                    *      +(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
            1103     3        m            D(JB+J)=
            1104     3                    *    S1*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
            1105     3                    *      -(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
            1106     3                    *   +C1*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
            1107     3                    *      +(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
            1108     3        m            C(JE+J)=
            1109     3                    *    C4*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
            1110     3                    *      +(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
            1111     3                    *   -S4*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
            1112     3                    *      -(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
            1113     3        m            D(JE+J)=
            1114     3                    *    S4*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
            1115     3                    *      +(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
            1116     3                    *   +C4*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
            1117     3                    *      -(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
            1118     3        m            C(JC+J)=
            1119     3                    *    C2*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
            1120     3                    *      -(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
            1121     3                    *   -S2*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
            1122     3                    *      +(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
            1123     3        m            D(JC+J)=
            1124     3                    *    S2*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
            1125     3                    *      -(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
            1126     3                    *   +C2*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
            1127     3                    *      +(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
            1128     3        m            C(JD+J)=
            1129     3                    *    C3*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
            1130     3                    *      +(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
            1131     3                    *   -S3*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
            1132     3                    *      -(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
            1133     3        m            D(JD+J)=
            1134     3                    *    S3*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
            1135     3                    *      +(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
            1136     3                    *   +C3*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
            1137     3                    *      -(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
            1138     3        v            I=I+INC3
            1139     3        v            J=J+INC4
            1140     3        v        145 CONTINUE
            1141     2                     IBASE=IBASE+INC1
            1142     2                     JBASE=JBASE+INC2
            1143     2                 150 CONTINUE
            1144     1                     JBASE=JBASE+JUMP
            1145     1                 160 CONTINUE
            1146                           RETURN
            1147                           END

 Diagnostic messages: program name(VPASSM)
   jwd8220o-i  "fftx.f", line 804: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8204o-i  "fftx.f", line 849: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 849: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 16.
   jwd6206s-i  "fftx.f", line 850: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 851: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 872: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 872: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 20.
   jwd6206s-i  "fftx.f", line 873: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 874: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 900: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 900: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 28.
   jwd6206s-i  "fftx.f", line 901: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 902: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 928: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 928: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 16.
   jwd6206s-i  "fftx.f", line 929: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 930: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 968: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 968: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 10.
   jwd6206s-i  "fftx.f", line 969: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 971: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 973: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 974: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 975: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 976: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "fftx.f", line 1001: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 1001: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 10.
   jwd6206s-i  "fftx.f", line 1002: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 1003: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 1010: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1013: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1016: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1019: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "fftx.f", line 1049: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 1049: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 14.
   jwd6206s-i  "fftx.f", line 1050: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 1051: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 1052: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1054: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1056: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1058: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1060: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1062: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1064: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1066: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8204o-i  "fftx.f", line 1095: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 1095: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 7.
   jwd6206s-i  "fftx.f", line 1096: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'C' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 1097: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'D' may cause different results from serial execution.
   jwd8209o-i  "fftx.f", line 1098: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1103: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1108: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1113: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1118: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1123: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1128: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "fftx.f", line 1133: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 344
   Statements : 235
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : VPASSM
   Attribute and Cross reference of name
     A
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 804  805
      |(Definition)     : 
      |(Reference)      : 850  850  852  852  873  873  875  875  876  876  901  901  901  903  903  903  904  904  904  905  905  906  906  929  929  929  931  931  931  931  931  934  934  934  934  934  937  937  937  937  937  940  940  940  940  940  969  969  969  969  970  970  970  970  973  973  974  974  975  975  976  976  1002  1002  1002  1002  1004  1004  1004  1004  1007  1007  1007  1007  1010  1010  1010  1010  1013  1013  1013  1013  1016  1016  1016  1016  1019  1019  1019  1019  1050  1050  1050  1050  1050  1052  1052  1052  1052  1052  1054  1054  1054  1054  1054  1056  1056  1056  1056  1058  1058  1058  1058  1060  1060  1060  1060  1060  1062  1062  1062  1062  1062  1064  1064  1064  1064  1066  1066  1066  1066  1096  1096  1096  1096  1096  1098  1098  1098  1098  1098  1098  1098  1098  1098  1103  1103  1103  1103  1103  1103  1103  1103  1103  1108  1108  1108  1108  1108  1108  1108  1108  1108  1113  1113  1113  1113  1113  1113  1113  1113  1113  1118  1118  1118  1118  1118  1118  1118  1118  1118  1123  1123  1123  1123  1123  1123  1123  1123  1123  1128  1128  1128  1128  1128  1128  1128  1128  1128  1133  1133  1133  1133  1133  1133  1133  1133  1133
     B
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 804  805
      |(Definition)     : 
      |(Reference)      : 851  851  853  853  874  874  875  875  876  876  902  902  902  903  903  904  904  905  905  905  906  906  906  930  930  930  931  931  931  931  931  934  934  934  934  934  937  937  937  937  937  940  940  940  940  940  971  971  971  971  972  972  972  972  973  973  974  974  975  975  976  976  1003  1003  1003  1003  1004  1004  1004  1004  1007  1007  1007  1007  1010  1010  1010  1010  1013  1013  1013  1013  1016  1016  1016  1016  1019  1019  1019  1019  1051  1051  1051  1051  1051  1052  1052  1052  1052  1054  1054  1054  1054  1056  1056  1056  1056  1056  1058  1058  1058  1058  1058  1060  1060  1060  1060  1062  1062  1062  1062  1064  1064  1064  1064  1064  1066  1066  1066  1066  1066  1097  1097  1097  1097  1097  1098  1098  1098  1098  1098  1098  1098  1098  1098  1103  1103  1103  1103  1103  1103  1103  1103  1103  1108  1108  1108  1108  1108  1108  1108  1108  1108  1113  1113  1113  1113  1113  1113  1113  1113  1113  1118  1118  1118  1118  1118  1118  1118  1118  1118  1123  1123  1123  1123  1123  1123  1123  1123  1123  1128  1128  1128  1128  1128  1128  1128  1128  1128  1133  1133  1133  1133  1133  1133  1133  1133  1133
     C
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 804  805
      |(Definition)     : 850  852  873  875  901  903  904  929  931  937  969  970  973  974  1002  1004  1010  1016  1050  1052  1054  1060  1062  1096  1098  1108  1118  1128
      |(Reference)      : 
     C1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 865  919  990  1082
      |(Reference)      : 875  876  931  934  1010  1013  1098  1103
     C2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 921  992  1084
      |(Reference)      : 937  940  1004  1007  1118  1123
     C3
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 994  1086
      |(Reference)      : 1016  1019  1128  1133
     C4
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1088
      |(Reference)      : 1108  1113
     COS36
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 824
      |(Definition)     : 
      |(Reference)      : 1052  1054  1056  1058  1060  1062  1064  1066  1098  1098  1103  1103  1108  1108  1113  1113  1118  1118  1123  1123  1128  1128  1133  1133
     COS72
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 824
      |(Definition)     : 
      |(Reference)      : 1052  1054  1056  1058  1060  1062  1064  1066  1098  1098  1103  1103  1108  1108  1113  1113  1118  1118  1123  1123  1128  1128  1133  1133
     D
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 804  805
      |(Definition)     : 851  853  874  876  902  905  906  930  934  940  971  972  975  976  1003  1007  1013  1019  1051  1056  1058  1064  1066  1097  1103  1113  1123  1133
      |(Reference)      : 
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 845  854  868  877  896  907  924  943  964  977  997  1022  1045  1068  1091  1138
      |(Reference)      : 850  850  851  851  852  852  853  853  854  873  873  874  874  875  875  875  875  876  876  876  876  877  901  901  901  902  902  902  903  903  903  903  903  904  904  904  904  904  905  905  905  905  905  906  906  906  906  906  907  929  929  929  930  930  930  931  931  931  931  931  931  931  931  931  931  934  934  934  934  934  934  934  934  934  934  937  937  937  937  937  937  937  937  937  937  940  940  940  940  940  940  940  940  940  940  943  969  969  969  969  970  970  970  970  971  971  971  971  972  972  972  972  973  973  973  973  974  974  974  974  975  975  975  975  976  976  976  976  977  1002  1002  1002  1002  1003  1003  1003  1003  1004  1004  1004  1004  1004  1004  1004  1004  1007  1007  1007  1007  1007  1007  1007  1007  1010  1010  1010  1010  1010  1010  1010  1010  1013  1013  1013  1013  1013  1013  1013  1013  1016  1016  1016  1016  1016  1016  1016  1016  1019  1019  1019  1019  1019  1019  1019  1019  1022  1050  1050  1050  1050  1050  1051  1051  1051  1051  1051  1052  1052  1052  1052  1052  1052  1052  1052  1052  1054  1054  1054  1054  1054  1054  1054  1054  1054  1056  1056  1056  1056  1056  1056  1056  1056  1056  1058  1058  1058  1058  1058  1058  1058  1058  1058  1060  1060  1060  1060  1060  1060  1060  1060  1060  1062  1062  1062  1062  1062  1062  1062  1062  1062  1064  1064  1064  1064  1064  1064  1064  1064  1064  1066  1066  1066  1066  1066  1066  1066  1066  1066  1068  1096  1096  1096  1096  1096  1097  1097  1097  1097  1097  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1098  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1103  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1108  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1113  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1118  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1123  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1128  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1133  1138
     IA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 840  889  955  1034
      |(Reference)      : 842  850  851  852  853  873  874  875  875  876  876  891  901  902  903  904  905  906  929  930  931  931  934  934  937  937  940  940  957  969  970  971  972  973  974  975  976  1002  1003  1004  1004  1007  1007  1010  1010  1013  1013  1016  1016  1019  1019  1036  1050  1051  1052  1054  1056  1058  1060  1062  1064  1066  1096  1097  1098  1098  1103  1103  1108  1108  1113  1113  1118  1118  1123  1123  1128  1128  1133  1133
     IB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 842  891  957  1036
      |(Reference)      : 850  851  852  853  873  874  875  875  876  876  893  901  902  903  903  904  904  905  905  906  906  929  930  931  931  931  931  934  934  934  934  937  937  937  937  940  940  940  940  959  969  970  971  972  973  974  975  976  1002  1003  1004  1004  1007  1007  1010  1010  1013  1013  1016  1016  1019  1019  1038  1050  1051  1052  1052  1054  1054  1056  1056  1058  1058  1060  1060  1062  1062  1064  1064  1066  1066  1096  1097  1098  1098  1098  1098  1103  1103  1103  1103  1108  1108  1108  1108  1113  1113  1113  1113  1118  1118  1118  1118  1123  1123  1123  1123  1128  1128  1128  1128  1133  1133  1133  1133
     IBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 832  857  880  910  946  980  1025  1071  1141
      |(Reference)      : 845  857  868  880  896  910  924  946  964  980  997  1025  1045  1071  1091  1141
     IC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 893  959  1038
      |(Reference)      : 901  902  903  903  904  904  905  905  906  906  929  930  931  931  931  931  934  934  934  934  937  937  937  937  940  940  940  940  961  969  970  971  972  973  974  975  976  1002  1003  1004  1004  1007  1007  1010  1010  1013  1013  1016  1016  1019  1019  1040  1050  1051  1052  1052  1054  1054  1056  1056  1058  1058  1060  1060  1062  1062  1064  1064  1066  1066  1096  1097  1098  1098  1098  1098  1103  1103  1103  1103  1108  1108  1108  1108  1113  1113  1113  1113  1118  1118  1118  1118  1123  1123  1123  1123  1128  1128  1128  1128  1133  1133  1133  1133
     ID
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 961  1040
      |(Reference)      : 969  970  971  972  973  974  975  976  1002  1003  1004  1004  1007  1007  1010  1010  1013  1013  1016  1016  1019  1019  1042  1050  1051  1052  1052  1054  1054  1056  1056  1058  1058  1060  1060  1062  1062  1064  1064  1066  1066  1096  1097  1098  1098  1098  1098  1103  1103  1103  1103  1108  1108  1108  1108  1113  1113  1113  1113  1118  1118  1118  1118  1123  1123  1123  1123  1128  1128  1128  1128  1133  1133  1133  1133
     IE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1042
      |(Reference)      : 1050  1051  1052  1052  1054  1054  1056  1056  1058  1058  1060  1060  1062  1062  1064  1064  1066  1066  1096  1097  1098  1098  1098  1098  1103  1103  1103  1103  1108  1108  1108  1108  1113  1113  1113  1113  1118  1118  1118  1118  1123  1123  1123  1123  1128  1128  1128  1128  1133  1133  1133  1133
     IFAC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 828  831  834
     IGO
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 834
      |(Reference)      : 835  836
     IINK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 829
      |(Reference)      : 842  891  893  957  959  961  1036  1038  1040  1042
     IJK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 849  872  900  928  968  1001  1049  1095
      |(Reference)      : 
     INC1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 829  857  880  910  946  980  1025  1071  1141
     INC2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 830  858  881  911  947  981  1026  1072  1142
     INC3
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 854  877  907  943  977  1022  1068  1138
     INC4
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 855  878  908  944  978  1023  1069  1139
     J
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 846  855  869  878  897  908  925  944  965  978  998  1023  1046  1069  1092  1139
      |(Reference)      : 850  851  852  853  855  873  874  875  876  878  901  902  903  904  905  906  908  929  930  931  934  937  940  944  969  970  971  972  973  974  975  976  978  1002  1003  1004  1007  1010  1013  1016  1019  1023  1050  1051  1052  1054  1056  1058  1060  1062  1064  1066  1069  1096  1097  1098  1103  1108  1113  1118  1123  1128  1133  1139
     JA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 841  890  956  1035
      |(Reference)      : 843  850  851  873  874  892  901  902  929  930  958  969  971  1002  1003  1037  1050  1051  1096  1097
     JB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 843  892  958  1037
      |(Reference)      : 852  853  875  876  894  903  905  931  934  960  973  975  1010  1013  1039  1052  1056  1098  1103
     JBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 833  858  862  881  883  911  915  947  949  981  985  1026  1028  1072  1076  1142  1144
      |(Reference)      : 846  858  862  869  881  883  897  911  915  925  947  949  965  981  985  998  1026  1028  1046  1072  1076  1092  1142  1144
     JC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 894  960  1039
      |(Reference)      : 904  906  937  940  962  970  972  1004  1007  1041  1060  1064  1118  1123
     JD
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 962  1041
      |(Reference)      : 974  976  1016  1019  1043  1062  1066  1128  1133
     JE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1043
      |(Reference)      : 1054  1058  1108  1113
     JINK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 830
      |(Reference)      : 831  843  892  894  958  960  962  1037  1039  1041  1043
     JUMP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 831
      |(Reference)      : 862  883  915  949  985  1028  1076  1144
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 863  916  986  1077
      |(Reference)      : 864  864  917  917  987  987  1078  1078
     KB
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 864  917  987  1078
      |(Reference)      : 865  866  918  918  919  920  988  988  989  990  991  1079  1079  1080  1081  1082  1083
     KC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 918  988  1079
      |(Reference)      : 921  922  989  992  993  1080  1084  1085
     KD
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 989  1080
      |(Reference)      : 994  995  1081  1086  1087
     KE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1081
      |(Reference)      : 1088  1089
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 844  867  895  923  963  996  1044  1090
      |(Reference)      : 
     LA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 830  844  860  861  863  867  895  913  914  916  923  963  983  984  986  996  1044  1074  1075  1077  1090
     LA1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 861  914  984  1075
      |(Reference)      : 863  916  986  1077
     LOT
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 849  872  900  928  968  1001  1049  1095
     M
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 828
      |(Reference)      : 829  860  863  913  916  983  986  1074  1077
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 804
      |(Definition)     : 
      |(Reference)      : 805  805  805  805  805  828
     S1
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 866  920  991  1083
      |(Reference)      : 875  876  931  934  1010  1013  1098  1103
     S2
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 922  993  1085
      |(Reference)      : 937  940  1004  1007  1118  1123
     S3
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 995  1087
      |(Reference)      : 1016  1019  1128  1133
     S4
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1089
      |(Reference)      : 1108  1113
     SIN36
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 824
      |(Definition)     : 
      |(Reference)      : 1052  1054  1056  1058  1060  1062  1064  1066  1098  1098  1103  1103  1108  1108  1113  1113  1118  1118  1123  1123  1128  1128  1133  1133
     SIN60
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 824
      |(Definition)     : 
      |(Reference)      : 903  904  905  906  931  931  934  934  937  937  940  940
     SIN72
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : initialized
      |(Declaration)    : 824
      |(Definition)     : 
      |(Reference)      : 1052  1054  1056  1058  1060  1062  1064  1066  1098  1098  1103  1103  1108  1108  1113  1113  1118  1118  1123  1123  1128  1128  1133  1133
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 804  805
      |(Definition)     : 
      |(Reference)      : 865  866  919  920  921  922  990  991  992  993  994  995  1082  1083  1084  1085  1086  1087  1088  1089
     VPASSM
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 804
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 840  
                           (Reference)  836
         15  execution     (Definition) 856  
                           (Reference)  849
         20  execution     (Definition) 859  
                           (Reference)  844
         25  execution     (Definition) 879  
                           (Reference)  872
         30  execution     (Definition) 882  
                           (Reference)  867
         40  execution     (Definition) 884  
                           (Reference)  863
         50  execution     (Definition) 889  
                           (Reference)  836
         55  execution     (Definition) 909  
                           (Reference)  900
         60  execution     (Definition) 912  
                           (Reference)  895
         65  execution     (Definition) 945  
                           (Reference)  928
         70  execution     (Definition) 948  
                           (Reference)  923
         80  execution     (Definition) 950  
                           (Reference)  916
         90  execution     (Definition) 955  
                           (Reference)  836
         95  execution     (Definition) 979  
                           (Reference)  968
        100  execution     (Definition) 982  
                           (Reference)  963
        105  execution     (Definition) 1024  
                           (Reference)  1001
        110  execution     (Definition) 1027  
                           (Reference)  996
        120  execution     (Definition) 1029  
                           (Reference)  986
        130  execution     (Definition) 1034  
                           (Reference)  836
        135  execution     (Definition) 1070  
                           (Reference)  1049
        140  execution     (Definition) 1073  
                           (Reference)  1044
        145  execution     (Definition) 1140  
                           (Reference)  1095
        150  execution     (Definition) 1143  
                           (Reference)  1090
        160  execution     (Definition) 1145  
                           (Reference)  1077

 External subroutine subprogram "CFFT99"
  (inc)(line-no.)(nest)(optimize)
            1148                           SUBROUTINE CFFT99(A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
            1149                     C     IMPLICIT DOUBLE PRECISION (A-H,O-Z)
            1150                     C
            1151                     C PURPOSE      PERFORMS MULTIPLE FAST FOURIER TRANSFORMS.  THIS PACKAGE
            1152                     C              WILL PERFORM A NUMBER OF SIMULTANEOUS COMPLEX PERIODIC
            1153                     C              FOURIER TRANSFORMS OR CORRESPONDING INVERSE TRANSFORMS.
            1154                     C              THAT IS, GIVEN A SET OF COMPLEX GRIDPOINT VECTORS, THE
            1155                     C              PACKAGE RETURNS A SET OF COMPLEX FOURIER
            1156                     C              COEFFICIENT VECTORS, OR VICE VERSA.  THE LENGTH OF THE
            1157                     C              TRANSFORMS MUST BE A NUMBER GREATER THAN 1 THAT HAS
            1158                     C              NO PRIME FACTORS OTHER THAN 2, 3, AND 5.
            1159                     C
            1160                     C              THE PACKAGE CFFT99 CONTAINS SEVERAL USER-LEVEL ROUTINES:
            1161                     C
            1162                     C            SUBROUTINE CFTFAX
            1163                     C                AN INITIALIZATION ROUTINE THAT MUST BE CALLED ONCE
            1164                     C                BEFORE A SEQUENCE OF CALLS TO CFFT99
            1165                     C                (PROVIDED THAT N IS NOT CHANGED).
            1166                     C
            1167                     C            SUBROUTINE CFFT99
            1168                     C                THE ACTUAL TRANSFORM ROUTINE ROUTINE, CABABLE OF
            1169                     C                PERFORMING BOTH THE TRANSFORM AND ITS INVERSE.
            1170                     C                HOWEVER, AS THE TRANSFORMS ARE NOT NORMALIZED,
            1171                     C                THE APPLICATION OF A TRANSFORM FOLLOWED BY ITS
            1172                     C                INVERSE WILL YIELD THE ORIGINAL VALUES MULTIPLIED
            1173                     C                BY N.
            1174                     C
            1175                     C
            1176                     C ACCESS       *FORTRAN,P=XLIB,SN=CFFT99
            1177                     C
            1178                     C
            1179                     C USAGE        LET N BE OF THE FORM 2**P * 3**Q * 5**R, WHERE P .GE. 0,
            1180                     C              Q .GE. 0, AND R .GE. 0.  THEN A TYPICAL SEQUENCE OF
            1181                     C              CALLS TO TRANSFORM A GIVEN SET OF COMPLEX VECTORS OF
            1182                     C              LENGTH N TO A SET OF (UNSCALED) COMPLEX FOURIER
            1183                     C              COEFFICIENT VECTORS OF LENGTH N IS
            1184                     C
            1185                     C                   DIMENSION IFAX(13),TRIGS(2*N)
            1186                     C                   COMPLEX A(...), WORK(...)
            1187                     C
            1188                     C                   CALL CFTFAX (N, IFAX, TRIGS)
            1189                     C                   CALL CFFT99 (A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
            1190                     C
            1191                     C              THE OUTPUT VECTORS OVERWRITE THE INPUT VECTORS, AND
            1192                     C              THESE ARE STORED IN A.  WITH APPROPRIATE CHOICES FOR
            1193                     C              THE OTHER ARGUMENTS, THESE VECTORS MAY BE CONSIDERED
            1194                     C              EITHER THE ROWS OR THE COLUMNS OF THE ARRAY A.
            1195                     C              SEE THE INDIVIDUAL WRITE-UPS FOR CFTFAX AND
            1196                     C              CFFT99 BELOW, FOR A DETAILED DESCRIPTION OF THE
            1197                     C              ARGUMENTS.
            1198                     C
            1199                     C HISTORY      THE PACKAGE WAS WRITTEN BY CLIVE TEMPERTON AT ECMWF IN
            1200                     C              NOVEMBER, 1978.  IT WAS MODIFIED, DOCUMENTED, AND TESTED
            1201                     C              FOR NCAR BY RUSS REW IN SEPTEMBER, 1980.  IT WAS
            1202                     C              FURTHER MODIFIED FOR THE FULLY COMPLEX CASE BY DAVE
            1203                     C              FULKER IN NOVEMBER, 1980.
            1204                     C
            1205                     C-----------------------------------------------------------------------
            1206                     C
            1207                     C SUBROUTINE CFTFAX (N,IFAX,TRIGS)
            1208                     C
            1209                     C PURPOSE      A SET-UP ROUTINE FOR CFFT99.  IT NEED ONLY BE
            1210                     C              CALLED ONCE BEFORE A SEQUENCE OF CALLS TO CFFT99,
            1211                     C              PROVIDED THAT N IS NOT CHANGED.
            1212                     C
            1213                     C ARGUMENT     IFAX(13),TRIGS(2*N)
            1214                     C DIMENSIONS
            1215                     C
            1216                     C ARGUMENTS
            1217                     C
            1218                     C ON INPUT     N
            1219                     C               AN EVEN NUMBER GREATER THAN 1 THAT HAS NO PRIME FACTOR
            1220                     C               GREATER THAN 5.  N IS THE LENGTH OF THE TRANSFORMS (SEE
            1221                     C               THE DOCUMENTATION FOR CFFT99 FOR THE DEFINITION OF
            1222                     C               THE TRANSFORMS).
            1223                     C
            1224                     C              IFAX
            1225                     C               AN INTEGER ARRAY.  THE NUMBER OF ELEMENTS ACTUALLY USED
            1226                     C               WILL DEPEND ON THE FACTORIZATION OF N.  DIMENSIONING
            1227                     C               IFAX FOR 13 SUFFICES FOR ALL N LESS THAN 1 MILLION.
            1228                     C
            1229                     C              TRIGS
            1230                     C               A REAL ARRAY OF DIMENSION 2*N
            1231                     C
            1232                     C ON OUTPUT    IFAX
            1233                     C               CONTAINS THE FACTORIZATION OF N.  IFAX(1) IS THE
            1234                     C               NUMBER OF FACTORS, AND THE FACTORS THEMSELVES ARE STORED
            1235                     C               IN IFAX(2),IFAX(3),...  IF N HAS ANY PRIME FACTORS
            1236                     C               GREATER THAN 5, IFAX(1) IS SET TO -99.
            1237                     C
            1238                     C              TRIGS
            1239                     C               AN ARRAY OF TRIGONOMETRIC FUNCTION VALUES SUBSEQUENTLY
            1240                     C               USED BY THE CFT ROUTINES.
            1241                     C
            1242                     C-----------------------------------------------------------------------
            1243                     C
            1244                     C SUBROUTINE CFFT99 (A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
            1245                     C
            1246                     C PURPOSE      PERFORM A NUMBER OF SIMULTANEOUS (UNNORMALIZED) COMPLEX
            1247                     C              PERIODIC FOURIER TRANSFORMS OR CORRESPONDING INVERSE
            1248                     C              TRANSFORMS.  GIVEN A SET OF COMPLEX GRIDPOINT
            1249                     C              VECTORS, THE PACKAGE RETURNS A SET OF
            1250                     C              COMPLEX FOURIER COEFFICIENT VECTORS, OR VICE
            1251                     C              VERSA.  THE LENGTH OF THE TRANSFORMS MUST BE A
            1252                     C              NUMBER HAVING NO PRIME FACTORS OTHER THAN
            1253                     C              2, 3, AND 5.  THIS ROUTINE IS
            1254                     C              OPTIMIZED FOR USE ON THE CRAY-1.
            1255                     C
            1256                     C ARGUMENT     COMPLEX A(N*INC+(LOT-1)*JUMP), WORK(N*LOT)
            1257                     C DIMENSIONS   REAL TRIGS(2*N), INTEGER IFAX(13)
            1258                     C
            1259                     C ARGUMENTS
            1260                     C
            1261                     C ON INPUT     A
            1262                     C               A COMPLEX ARRAY OF LENGTH N*INC+(LOT-1)*JUMP CONTAINING
            1263                     C               THE INPUT GRIDPOINT OR COEFFICIENT VECTORS.  THIS ARRAY IS
            1264                     C               OVERWRITTEN BY THE RESULTS.
            1265                     C
            1266                     C               N.B. ALTHOUGH THE ARRAY A IS USUALLY CONSIDERED TO BE OF
            1267                     C               TYPE COMPLEX IN THE CALLING PROGRAM, IT IS TREATED AS
            1268                     C               REAL WITHIN THE TRANSFORM PACKAGE.  THIS REQUIRES THAT
            1269                     C               SUCH TYPE CONFLICTS ARE PERMITTED IN THE USER'S
            1270                     C               ENVIRONMENT, AND THAT THE STORAGE OF COMPLEX NUMBERS
            1271                     C               MATCHES THE ASSUMPTIONS OF THIS ROUTINE.  THIS ROUTINE
            1272                     C               ASSUMES THAT THE REAL AND IMAGINARY PORTIONS OF A
            1273                     C               COMPLEX NUMBER OCCUPY ADJACENT ELEMENTS OF MEMORY.  IF
            1274                     C               THESE CONDITIONS ARE NOT MET, THE USER MUST TREAT THE
            1275                     C               ARRAY A AS REAL (AND OF TWICE THE ABOVE LENGTH), AND
            1276                     C               WRITE THE CALLING PROGRAM TO TREAT THE REAL AND
            1277                     C               IMAGINARY PORTIONS EXPLICITLY.
            1278                     C
            1279                     C              WORK
            1280                     C               A COMPLEX WORK ARRAY OF LENGTH N*LOT OR A REAL ARRAY
            1281                     C               OF LENGTH 2*N*LOT.  SEE N.B. ABOVE.
            1282                     C
            1283                     C              TRIGS
            1284                     C               AN ARRAY SET UP BY CFTFAX, WHICH MUST BE CALLED FIRST.
            1285                     C
            1286                     C              IFAX
            1287                     C               AN ARRAY SET UP BY CFTFAX, WHICH MUST BE CALLED FIRST.
            1288                     C
            1289                     C
            1290                     C               N.B. IN THE FOLLOWING ARGUMENTS, INCREMENTS ARE MEASURED
            1291                     C               IN WORD PAIRS, BECAUSE EACH COMPLEX ELEMENT IS ASSUMED
            1292                     C               TO OCCUPY AN ADJACENT PAIR OF WORDS IN MEMORY.
            1293                     C
            1294                     C              INC
            1295                     C               THE INCREMENT (IN WORD PAIRS) BETWEEN SUCCESSIVE ELEMENTS
            1296                     C               OF EACH (COMPLEX) GRIDPOINT OR COEFFICIENT VECTOR
            1297                     C               (E.G.  INC=1 FOR CONSECUTIVELY STORED DATA).
            1298                     C
            1299                     C              JUMP
            1300                     C               THE INCREMENT (IN WORD PAIRS) BETWEEN THE FIRST ELEMENTS
            1301                     C               OF SUCCESSIVE DATA OR COEFFICIENT VECTORS.  ON THE CRAY-1,
            1302                     C               TRY TO ARRANGE DATA SO THAT JUMP IS NOT A MULTIPLE OF 8
            1303                     C               (TO AVOID MEMORY BANK CONFLICTS).  FOR CLARIFICATION OF
            1304                     C               INC AND JUMP, SEE THE EXAMPLES BELOW.
            1305                     C
            1306                     C              N
            1307                     C               THE LENGTH OF EACH TRANSFORM (SEE DEFINITION OF
            1308                     C               TRANSFORMS, BELOW).
            1309                     C
            1310                     C              LOT
            1311                     C               THE NUMBER OF TRANSFORMS TO BE DONE SIMULTANEOUSLY.
            1312                     C
            1313                     C              ISIGN
            1314                     C               = -1 FOR A TRANSFORM FROM GRIDPOINT VALUES TO FOURIER
            1315                     C                    COEFFICIENTS.
            1316                     C               = +1 FOR A TRANSFORM FROM FOURIER COEFFICIENTS TO
            1317                     C                    GRIDPOINT VALUES.
            1318                     C
            1319                     C ON OUTPUT    A
            1320                     C               IF ISIGN = -1, AND LOT GRIDPOINT VECTORS ARE SUPPLIED,
            1321                     C               EACH CONTAINING THE COMPLEX SEQUENCE:
            1322                     C
            1323                     C               G(0),G(1), ... ,G(N-1)  (N COMPLEX VALUES)
            1324                     C
            1325                     C               THEN THE RESULT CONSISTS OF LOT COMPLEX VECTORS EACH
            1326                     C               CONTAINING THE CORRESPONDING N COEFFICIENT VALUES:
            1327                     C
            1328                     C               C(0),C(1), ... ,C(N-1)  (N COMPLEX VALUES)
            1329                     C
            1330                     C               DEFINED BY:
            1331                     C                 C(K) = SUM(J=0,...,N-1)( G(J)*EXP(-2*I*J*K*PI/N) )
            1332                     C                 WHERE I = SQRT(-1)
            1333                     C
            1334                     C
            1335                     C               IF ISIGN = +1, AND LOT COEFFICIENT VECTORS ARE SUPPLIED,
            1336                     C               EACH CONTAINING THE COMPLEX SEQUENCE:
            1337                     C
            1338                     C               C(0),C(1), ... ,C(N-1)  (N COMPLEX VALUES)
            1339                     C
            1340                     C               THEN THE RESULT CONSISTS OF LOT COMPLEX VECTORS EACH
            1341                     C               CONTAINING THE CORRESPONDING N GRIDPOINT VALUES:
            1342                     C
            1343                     C               G(0),G(1), ... ,G(N-1)  (N COMPLEX VALUES)
            1344                     C
            1345                     C               DEFINED BY:
            1346                     C                 G(J) = SUM(K=0,...,N-1)( G(K)*EXP(+2*I*J*K*PI/N) )
            1347                     C                 WHERE I = SQRT(-1)
            1348                     C
            1349                     C
            1350                     C               A CALL WITH ISIGN=-1 FOLLOWED BY A CALL WITH ISIGN=+1
            1351                     C               (OR VICE VERSA) RETURNS THE ORIGINAL DATA, MULTIPLIED
            1352                     C               BY THE FACTOR N.
            1353                     C
            1354                     C
            1355                     C EXAMPLE       GIVEN A 64 BY 9 GRID OF COMPLEX VALUES, STORED IN
            1356                     C               A 66 BY 9 COMPLEX ARRAY, A, COMPUTE THE TWO DIMENSIONAL
            1357                     C               FOURIER TRANSFORM OF THE GRID.  FROM TRANSFORM THEORY,
            1358                     C               IT IS KNOWN THAT A TWO DIMENSIONAL TRANSFORM CAN BE
            1359                     C               OBTAINED BY FIRST TRANSFORMING THE GRID ALONG ONE
            1360                     C               DIRECTION, THEN TRANSFORMING THESE RESULTS ALONG THE
            1361                     C               ORTHOGONAL DIRECTION.
            1362                     C
            1363                     C               COMPLEX A(66,9), WORK(64,9)
            1364                     C               REAL TRIGS1(128), TRIGS2(18)
            1365                     C               INTEGER IFAX1(13), IFAX2(13)
            1366                     C
            1367                     C               SET UP THE IFAX AND TRIGS ARRAYS FOR EACH DIRECTION:
            1368                     C
            1369                     C               CALL CFTFAX(64, IFAX1, TRIGS1)
            1370                     C               CALL CFTFAX( 9, IFAX2, TRIGS2)
            1371                     C
            1372                     C               IN THIS CASE, THE COMPLEX VALUES OF THE GRID ARE
            1373                     C               STORED IN MEMORY AS FOLLOWS (USING U AND V TO
            1374                     C               DENOTE THE REAL AND IMAGINARY COMPONENTS, AND
            1375                     C               ASSUMING CONVENTIONAL FORTRAN STORAGE):
            1376                     C
            1377                     C   U(1,1), V(1,1), U(2,1), V(2,1),  ...  U(64,1), V(64,1), 4 NULLS,
            1378                     C
            1379                     C   U(1,2), V(1,2), U(2,2), V(2,2),  ...  U(64,2), V(64,2), 4 NULLS,
            1380                     C
            1381                     C   .       .       .       .         .   .        .        .
            1382                     C   .       .       .       .         .   .        .        .
            1383                     C   .       .       .       .         .   .        .        .
            1384                     C
            1385                     C   U(1,9), V(1,9), U(2,9), V(2,9),  ...  U(64,9), V(64,9), 4 NULLS.
            1386                     C
            1387                     C               WE CHOOSE (ARBITRARILY) TO TRANSORM FIRST ALONG THE
            1388                     C               DIRECTION OF THE FIRST SUBSCRIPT.  THUS WE DEFINE
            1389                     C               THE LENGTH OF THE TRANSFORMS, N, TO BE 64, THE
            1390                     C               NUMBER OF TRANSFORMS, LOT, TO BE 9, THE INCREMENT
            1391                     C               BETWEEN ELEMENTS OF EACH TRANSFORM, INC, TO BE 1,
            1392                     C               AND THE INCREMENT BETWEEN THE STARTING POINTS
            1393                     C               FOR EACH TRANSFORM, JUMP, TO BE 66 (THE FIRST
            1394                     C               DIMENSION OF A).
            1395                     C
            1396                     C               CALL CFFT99( A, WORK, TRIGS1, IFAX1, 1, 66, 64, 9, -1)
            1397                     C
            1398                     C               TO TRANSFORM ALONG THE DIRECTION OF THE SECOND SUBSCRIPT,
            1399                     C               THE ROLES OF THE INCREMENTS ARE REVERSED.  THUS WE DEFINE
            1400                     C               THE LENGTH OF THE TRANSFORMS, N, TO BE 9, THE
            1401                     C               NUMBER OF TRANSFORMS, LOT, TO BE 64, THE INCREMENT
            1402                     C               BETWEEN ELEMENTS OF EACH TRANSFORM, INC, TO BE 66,
            1403                     C               AND THE INCREMENT BETWEEN THE STARTING POINTS
            1404                     C               FOR EACH TRANSFORM, JUMP, TO BE 1
            1405                     C
            1406                     C               CALL CFFT99( A, WORK, TRIGS2, IFAX2, 66, 1, 9, 64, -1)
            1407                     C
            1408                     C               THESE TWO SEQUENTIAL STEPS RESULTS IN THE TWO-DIMENSIONAL
            1409                     C               FOURIER COEFFICIENT ARRAY OVERWRITING THE INPUT
            1410                     C               GRIDPOINT ARRAY, A.  THE SAME TWO STEPS APPLIED AGAIN
            1411                     C               WITH ISIGN = +1 WOULD RESULT IN THE RECONSTRUCTION OF
            1412                     C               THE GRIDPOINT ARRAY (MULTIPLIED BY A FACTOR OF 64*9).
            1413                     C
            1414                     C
            1415                     C-----------------------------------------------------------------------
            1416                           DIMENSION A(1),WORK(1),TRIGS(1),IFAX(1)
            1417                     C
            1418                     C     SUBROUTINE 'CFFT99' - MULTIPLE FAST COMPLEX FOURIER TRANSFORM
            1419                     C
            1420                     C     A IS THE ARRAY CONTAINING INPUT AND OUTPUT DATA
            1421                     C     WORK IS AN AREA OF SIZE N*LOT
            1422                     C     TRIGS IS A PREVIOUSLY PREPARED LIST OF TRIG FUNCTION VALUES
            1423                     C     IFAX IS A PREVIOUSLY PREPARED LIST OF FACTORS OF N
            1424                     C     INC IS THE INCREMENT WITHIN EACH DATA "VECTOR"
            1425                     C         (E.G. INC=1 FOR CONSECUTIVELY STORED DATA)
            1426                     C     JUMP IS THE INCREMENT BETWEEN THE START OF EACH DATA VECTOR
            1427                     C     N IS THE LENGTH OF THE DATA VECTORS
            1428                     C     LOT IS THE NUMBER OF DATA VECTORS
            1429                     C     ISIGN = +1 FOR TRANSFORM FROM SPECTRAL TO GRIDPOINT
            1430                     C           = -1 FOR TRANSFORM FROM GRIDPOINT TO SPECTRAL
            1431                     C
            1432                     C
            1433                     C     VECTORIZATION IS ACHIEVED ON CRAY BY DOING THE TRANSFORMS IN
            1434                     C     PARALLEL.
            1435                     C
            1436                     C
            1437                     C THE FOLLOWING CALL IS FOR MONITORING LIBRARY USE AT NCAR
            1438                     CVAX>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            1439                     CVAX  CALL Q8QST4 ( 4HXLIB, 6HCFFT99, 6HCFFT99, 10HVERSION 01)
            1440                     CVAX>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            1441                     C
            1442                           NN = N+N
            1443                           INK=INC+INC
            1444                           JUM = JUMP+JUMP
            1445                           NFAX=IFAX(1)
            1446                           JNK = 2
            1447                           JST = 2
            1448                           IF (ISIGN.GE.0) GO TO 30
            1449                     C
            1450                     C     THE INNERMOST TEMPERTON ROUTINES HAVE NO FACILITY FOR THE
            1451                     C     FORWARD (ISIGN = -1) TRANSFORM.  THEREFORE, THE INPUT MUST BE
            1452                     C     REARRANGED AS FOLLOWS:
            1453                     C
            1454                     C     THE ORDER OF EACH INPUT VECTOR,
            1455                     C
            1456                     C     G(0), G(1), G(2), ... , G(N-2), G(N-1)
            1457                     C
            1458                     C     IS REVERSED (EXCLUDING G(0)) TO YIELD
            1459                     C
            1460                     C     G(0), G(N-1), G(N-2), ... , G(2), G(1).
            1461                     C
            1462                     C     WITHIN THE TRANSFORM, THE CORRESPONDING EXPONENTIAL MULTIPLIER
            1463                     C     IS THEN PRECISELY THE CONJUGATE OF THAT FOR THE NORMAL
            1464                     C     ORDERING.  THUS THE FORWARD (ISIGN = -1) TRANSFORM IS
            1465                     C     ACCOMPLISHED
            1466                     C
            1467                     C     FOR NFAX ODD, THE INPUT MUST BE TRANSFERRED TO THE WORK ARRAY,
            1468                     C     AND THE REARRANGEMENT CAN BE DONE DURING THE MOVE.
            1469                     C
            1470                           JNK = -2
            1471                           JST = NN-2
            1472                           IF (MOD(NFAX,2).EQ.1) GOTO 40
            1473                     C
            1474                     C     FOR NFAX EVEN, THE REARRANGEMENT MUST BE APPLIED DIRECTLY TO
            1475                     C     THE INPUT ARRAY.  THIS CAN BE DONE BY SWAPPING ELEMENTS.
            1476                     C
            1477                           IBASE = 1
            1478                           ILAST = (N-1)*INK
            1479                           NH = N/2
            1480     1                     DO 20 L=1,LOT
            1481     1                     I1 = IBASE+INK
            1482     1                     I2 = IBASE+ILAST
            1483     1               CDIR$ IVDEP
            1484     2       6s            DO 10 M=1,NH
            1485     2               C     SWAP REAL AND IMAGINARY PORTIONS
            1486     2       6s            HREAL = A(I1)
            1487     2       6s            HIMAG = A(I1+1)
            1488     2       6s            A(I1) = A(I2)
            1489     2       6s            A(I1+1) = A(I2+1)
            1490     2       6s            A(I2) = HREAL
            1491     2       6s            A(I2+1) = HIMAG
            1492     2       6s            I1 = I1+INK
            1493     2       6s            I2 = I2-INK
            1494     2       6s         10 CONTINUE
            1495     1                     IBASE = IBASE+JUM
            1496     1                  20 CONTINUE
            1497                           GOTO 100
            1498                     C
            1499                        30 CONTINUE
            1500                           IF (MOD(NFAX,2).EQ.0) GOTO 100
            1501                     C
            1502                        40 CONTINUE
            1503                     C
            1504                     C     DURING THE TRANSFORM PROCESS, NFAX STEPS ARE TAKEN, AND THE
            1505                     C     RESULTS ARE STORED ALTERNATELY IN WORK AND IN A.  IF NFAX IS
            1506                     C     ODD, THE INPUT DATA ARE FIRST MOVED TO WORK SO THAT THE FINAL
            1507                     C     RESULT (AFTER NFAX STEPS) IS STORED IN ARRAY A.
            1508                     C
            1509                           IBASE=1
            1510                           JBASE=1
            1511     1                     DO 60 L=1,LOT
            1512     1               C     MOVE REAL AND IMAGINARY PORTIONS OF ELEMENT ZERO
            1513     1                     WORK(JBASE) = A(IBASE)
            1514     1                     WORK(JBASE+1) = A(IBASE+1)
            1515     1                     I=IBASE+INK
            1516     1                     J=JBASE+JST
            1517     1               CDIR$ IVDEP
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1518     2       8s            DO 50 M=2,N
            1519     2               C     MOVE REAL AND IMAGINARY PORTIONS OF OTHER ELEMENTS (POSSIBLY IN
            1520     2               C     REVERSE ORDER, DEPENDING ON JST AND JNK)
            1521     2       8s            WORK(J) = A(I)
            1522     2       8s            WORK(J+1) = A(I+1)
            1523     2       8s            I=I+INK
            1524     2       8s            J=J+JNK
            1525     2       8s         50 CONTINUE
            1526     1                     IBASE=IBASE+JUM
            1527     1                     JBASE=JBASE+NN
            1528     1                  60 CONTINUE
            1529                     C
            1530                       100 CONTINUE
            1531                     C
            1532                     C     PERFORM THE TRANSFORM PASSES, ONE PASS FOR EACH FACTOR.  DURING
            1533                     C     EACH PASS THE DATA ARE MOVED FROM A TO WORK OR FROM WORK TO A.
            1534                     C
            1535                     C     FOR NFAX EVEN, THE FIRST PASS MOVES FROM A TO WORK
            1536                           IGO = 110
            1537                     C     FOR NFAX ODD, THE FIRST PASS MOVES FROM WORK TO A
            1538                           IF (MOD(NFAX,2).EQ.1) IGO = 120
            1539                           LA=1
            1540     1       4s            DO 140 K=1,NFAX
            1541     1       4s            IF (IGO.EQ.120) GO TO 120
            1542     1       4s        110 CONTINUE
            1543     1       4s            CALL VPASSM(A(1),A(2),WORK(1),WORK(2),TRIGS,
            1544     1                    *   INK,2,JUM,NN,LOT,N,IFAX(K+1),LA)
            1545     1       4s            IGO=120
            1546     1       4s            GO TO 130
            1547     1       4s        120 CONTINUE
            1548     1       4s            CALL VPASSM(WORK(1),WORK(2),A(1),A(2),TRIGS,
            1549     1                    *    2,INK,NN,JUM,LOT,N,IFAX(K+1),LA)
            1550     1       4s            IGO=110
            1551     1       4s        130 CONTINUE
            1552     1       4s            LA=LA*IFAX(K+1)
            1553     1       4s        140 CONTINUE
            1554                     C
            1555                     C     AT THIS POINT THE FINAL TRANSFORM RESULT IS STORED IN A.
            1556                     C
            1557                           RETURN
            1558                           END

 Diagnostic messages: program name(CFFT99)
   jwd8662o-i  "fftx.f", line 1484: This loop is not software pipelined because no schedule is obtained.
   jwd8202o-i  "fftx.f", line 1484: Loop unrolled 6 times.
   jwd6206s-i  "fftx.f", line 1486: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'I1' in rank '1' of array 'A' may cause different results from serial execution.
   jwd6206s-i  "fftx.f", line 1488: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'I2' in rank '1' of array 'A' may cause different results from serial execution.
   jwd8204o-i  "fftx.f", line 1518: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 1518: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 32.
   jwd6206s-i  "fftx.f", line 1521: SIMD conversion cannot be applied to DO loop: unpredictable induction variable 'J' in rank '1' of array 'WORK' may cause different results from serial execution.
   jwd6123s-i  "fftx.f", line 1540: SIMD conversion cannot be applied to DO loop: a data with restricted type was found in the DO loop.
   jwd6229s-i  "fftx.f", line 1540: SIMD conversion cannot be applied to DO loop: there are IF statements in the loop.
   jwd8664o-i  "fftx.f", line 1540: This loop is not software pipelined because the loop contains an instruction not covered by software pipelining, such as function call.
   jwd8202o-i  "fftx.f", line 1540: Loop unrolled 4 times.
   jwd6202s-i  "fftx.f", line 1541: SIMD conversion cannot be applied to DO loop: data dependency of variable 'IGO' may cause different results from serial execution for loop.
   jwd6208s-i  "fftx.f", line 1542: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1542: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'N' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1542: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'TRIGS' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'N' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'NN' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LA' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'JUM' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'WORK' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'INK' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'A' may be different from the order of data references in serial execution.
   jwd6122s-i  "fftx.f", line 1543: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6208s-i  "fftx.f", line 1548: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'LOT' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1548: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'N' may be different from the order of data references in serial execution.
   jwd6208s-i  "fftx.f", line 1548: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.
   jwd6122s-i  "fftx.f", line 1548: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.
   jwd6202s-i  "fftx.f", line 1552: SIMD conversion cannot be applied to DO loop: data dependency of variable 'LA' may cause different results from serial execution for loop.
   jwd6208s-i  "fftx.f", line 1552: SIMD conversion cannot be applied to DO loop: the order of data references of definition 'IFAX' may be different from the order of data references in serial execution.

 Procedure information
   Lines      : 411
   Statements : 68
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : CFFT99
   Attribute and Cross reference of name
     A
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1148  1416
      |(Definition)     : 1488  1489  1490  1491  1543  1543  1548  1548
      |(Reference)      : 1486  1487  1488  1489  1513  1514  1521  1522
     CFFT99
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1148
      |(Reference)      : 
     HIMAG
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1487
      |(Reference)      : 1491
     HREAL
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1486
      |(Reference)      : 1490
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1515  1523
      |(Reference)      : 1521  1522  1523
     I1
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1481  1492
      |(Reference)      : 1486  1487  1488  1489  1492
     I2
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1482  1493
      |(Reference)      : 1488  1489  1490  1491  1493
     IBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1477  1495  1509  1526
      |(Reference)      : 1481  1482  1495  1513  1514  1515  1526
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1148  1416
      |(Definition)     : 1543  1548
      |(Reference)      : 1445  1552
     IGO
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1536  1538  1545  1550
      |(Reference)      : 1541
     ILAST
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1478
      |(Reference)      : 1482
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1148
      |(Definition)     : 
      |(Reference)      : 1443  1443
     INK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1443  1543  1548
      |(Reference)      : 1478  1481  1492  1493  1515  1523
     ISIGN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1148
      |(Definition)     : 
      |(Reference)      : 1448
     J
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1516  1524
      |(Reference)      : 1521  1522  1524
     JBASE
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1510  1527
      |(Reference)      : 1513  1514  1516  1527
     JNK
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1446  1470
      |(Reference)      : 1524
     JST
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1447  1471
      |(Reference)      : 1516
     JUM
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1444  1543  1548
      |(Reference)      : 1495  1526
     JUMP
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1148
      |(Definition)     : 
      |(Reference)      : 1444  1444
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1540
      |(Reference)      : 1543  1548  1552
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1480  1511
      |(Reference)      : 
     LA
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1539  1543  1548  1552
      |(Reference)      : 1552
     LOT
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1148
      |(Definition)     : 1543  1548
      |(Reference)      : 1480  1511
     M
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1484  1518
      |(Reference)      : 
     MOD
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1472  1500  1538
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1148
      |(Definition)     : 1543  1548
      |(Reference)      : 1442  1442  1478  1479  1518
     NFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1445
      |(Reference)      : 1472  1500  1538  1540
     NH
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1479
      |(Reference)      : 1484
     NN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1442  1543  1548
      |(Reference)      : 1471  1527
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1148  1416
      |(Definition)     : 1543  1548
      |(Reference)      : 
     VPASSM
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1543  1548
     WORK
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1148  1416
      |(Definition)     : 1513  1514  1521  1522  1543  1543  1548  1548
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 1494  
                           (Reference)  1484
         20  execution     (Definition) 1496  
                           (Reference)  1480
         30  execution     (Definition) 1499  
                           (Reference)  1448
         40  execution     (Definition) 1502  
                           (Reference)  1472
         50  execution     (Definition) 1525  
                           (Reference)  1518
         60  execution     (Definition) 1528  
                           (Reference)  1511
        100  execution     (Definition) 1530  
                           (Reference)  1497  1500
        110  execution     (Definition) 1542
        120  execution     (Definition) 1547  
                           (Reference)  1541
        130  execution     (Definition) 1551  
                           (Reference)  1546
        140  execution     (Definition) 1553  
                           (Reference)  1540

 External subroutine subprogram "CFTFAX"
  (inc)(line-no.)(nest)(optimize)
            1559                           SUBROUTINE CFTFAX(N,IFAX,TRIGS)
            1560                     C     IMPLICIT DOUBLE PRECISION (A-H,O-Z)
            1561                           DIMENSION IFAX(13),TRIGS(1)
            1562                     C
            1563                     C     THIS ROUTINE WAS MODIFIED FROM TEMPERTON'S ORIGINAL
            1564                     C     BY DAVE FULKER.  IT NO LONGER PRODUCES FACTORS IN ASCENDING
            1565                     C     ORDER, AND THERE ARE NONE OF THE ORIGINAL "MODE" OPTIONS.
            1566                     C
            1567                     C ON INPUT     N
            1568                     C               THE LENGTH OF EACH COMPLEX TRANSFORM TO BE PERFORMED
            1569                     C
            1570                     C               N MUST BE GREATER THAN 1 AND CONTAIN NO PRIME
            1571                     C               FACTORS GREATER THAN 5.
            1572                     C
            1573                     C ON OUTPUT    IFAX
            1574                     C               IFAX(1)
            1575                     C                 THE NUMBER OF FACTORS CHOSEN OR -99 IN CASE OF ERROR
            1576                     C               IFAX(2) THRU IFAX( IFAX(1)+1 )
            1577                     C                 THE FACTORS OF N IN THE FOLLOWIN ORDER:  APPEARING
            1578                     C                 FIRST ARE AS MANY FACTORS OF 4 AS CAN BE OBTAINED.
            1579                     C                 SUBSEQUENT FACTORS ARE PRIMES, AND APPEAR IN
            1580                     C                 ASCENDING ORDER, EXCEPT FOR MULTIPLE FACTORS.
            1581                     C
            1582                     C              TRIGS
            1583                     C               2N SIN AND COS VALUES FOR USE BY THE TRANSFORM ROUTINE
            1584                     C
            1585                           CALL FACT(N,IFAX)
            1586                           K = IFAX(1)
            1587                           IF (K .LT. 1 .OR. IFAX(K+1) .GT. 5) IFAX(1) = -99
            1588                     CVAX>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            1589                     CVAX  IF (IFAX(1) .LE. 0 )CALL ULIBER(33, " FFTFAX -- INVALID N", 20)
            1590                           IF (IFAX(1) .LE. 0 ) WRITE(6,*) ' FFTFAX -- INVALID N'
            1591                           IF (IFAX(1) .LE. 0 ) STOP 20
            1592                     CVAX>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            1593                           CALL CFTRIG (N, TRIGS)
            1594                           RETURN
            1595                           END

 Procedure information
   Lines      : 37
   Statements : 10
   Stack(byte): 0
   Prefetch num: 0

 Scoping unit of external sub-program : CFTFAX
   Attribute and Cross reference of name
     CFTFAX
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1559
      |(Reference)      : 
     CFTRIG
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1593
     FACT
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1585
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1559  1561
      |(Definition)     : 1585  1587
      |(Reference)      : 1586  1587  1590  1591
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1586
      |(Reference)      : 1587  1587
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1559
      |(Definition)     : 1585  1593
      |(Reference)      : 
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1559  1561
      |(Definition)     : 1593
      |(Reference)      : 

 External subroutine subprogram "FACT"
  (inc)(line-no.)(nest)(optimize)
            1596                           SUBROUTINE FACT(N,IFAX)
            1597                     C     IMPLICIT DOUBLE PRECISION (A-H,O-Z)
            1598                     C     FACTORIZATION ROUTINE THAT FIRST EXTRACTS ALL FACTORS OF 4
            1599                           DIMENSION IFAX(13)
            1600                           IF (N.GT.1) GO TO 10
            1601                           IFAX(1) = 0
            1602                           IF (N.LT.1) IFAX(1) = -99
            1603                           RETURN
            1604                        10 NN=N
            1605                           K=1
            1606                     C     TEST FOR FACTORS OF 4
            1607                        20 IF (MOD(NN,4).NE.0) GO TO 30
            1608                           K=K+1
            1609                           IFAX(K)=4
            1610                           NN=NN/4
            1611                           IF (NN.EQ.1) GO TO 80
            1612                           GO TO 20
            1613                     C     TEST FOR EXTRA FACTOR OF 2
            1614                        30 IF (MOD(NN,2).NE.0) GO TO 40
            1615                           K=K+1
            1616                           IFAX(K)=2
            1617                           NN=NN/2
            1618                           IF (NN.EQ.1) GO TO 80
            1619                     C     TEST FOR FACTORS OF 3
            1620                        40 IF (MOD(NN,3).NE.0) GO TO 50
            1621                           K=K+1
            1622                           IFAX(K)=3
            1623                           NN=NN/3
            1624                           IF (NN.EQ.1) GO TO 80
            1625                           GO TO 40
            1626                     C     NOW FIND REMAINING FACTORS
            1627                        50 L=5
            1628                           MAX = SQRT(FLOAT(NN))
            1629                           INC=2
            1630                     C     INC ALTERNATELY TAKES ON VALUES 2 AND 4
            1631                        60 IF (MOD(NN,L).NE.0) GO TO 70
            1632                           K=K+1
            1633                           IFAX(K)=L
            1634                           NN=NN/L
            1635                           IF (NN.EQ.1) GO TO 80
            1636                           GO TO 60
            1637                        70 IF (L.GT.MAX) GO TO 75
            1638                           L=L+INC
            1639                           INC=6-INC
            1640                           GO TO 60
            1641                        75 K = K+1
            1642                           IFAX(K) = NN
            1643                        80 IFAX(1)=K-1
            1644                     C     IFAX(1) NOW CONTAINS NUMBER OF FACTORS
            1645                           RETURN
            1646                           END

 Diagnostic messages: program name(FACT)
   jwd6132s-i  "fftx.f", line 1607: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.
   jwd6132s-i  "fftx.f", line 1620: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.
   jwd6132s-i  "fftx.f", line 1631: SIMD conversion cannot be applied to loop of DO WHILE, DO UNTIL or IF/GO TO.

 Procedure information
   Lines      : 51
   Statements : 43
   Stack(byte): 16
   Prefetch num: 0

 Scoping unit of external sub-program : FACT
   Attribute and Cross reference of name
     FACT
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1596
      |(Reference)      : 
     FLOAT
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1628
     IFAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1596  1599
      |(Definition)     : 1601  1602  1609  1616  1622  1633  1642  1643
      |(Reference)      : 
     INC
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1629  1639
      |(Reference)      : 1638  1639
     K
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1605  1608  1615  1621  1632  1641
      |(Reference)      : 1608  1609  1615  1616  1621  1622  1632  1633  1641  1642  1643
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1627  1638
      |(Reference)      : 1631  1633  1634  1637  1638
     MAX
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1628
      |(Reference)      : 1637
     MOD
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1607  1614  1620  1631
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1596
      |(Definition)     : 
      |(Reference)      : 1600  1602  1604
     NN
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1604  1610  1617  1623  1634
      |(Reference)      : 1607  1610  1611  1614  1617  1618  1620  1623  1624  1628  1631  1634  1635  1642
     SQRT
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1628
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 1604  
                           (Reference)  1600
         20  execution     (Definition) 1607  
                           (Reference)  1612
         30  execution     (Definition) 1614  
                           (Reference)  1607
         40  execution     (Definition) 1620  
                           (Reference)  1614  1625
         50  execution     (Definition) 1627  
                           (Reference)  1620
         60  execution     (Definition) 1631  
                           (Reference)  1636  1640
         70  execution     (Definition) 1637  
                           (Reference)  1631
         75  execution     (Definition) 1641  
                           (Reference)  1637
         80  execution     (Definition) 1643  
                           (Reference)  1611  1618  1624  1635

 External subroutine subprogram "CFTRIG"
  (inc)(line-no.)(nest)(optimize)
            1647                           SUBROUTINE CFTRIG(N,TRIGS)
            1648                     C     IMPLICIT DOUBLE PRECISION (A-H,O-Z)
            1649                           DIMENSION TRIGS(1)
            1650                           PI=2.0*ASIN(1.0)
            1651                           DEL=(PI+PI)/FLOAT(N)
            1652                           L=N+N
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
            1653     1        v            DO 10 I=1,L,2
            1654     1        v            ANGLE=0.5*FLOAT(I-1)*DEL
            1655     1        v            TRIGS(I)=COS(ANGLE)
            1656     1        v            TRIGS(I+1)=SIN(ANGLE)
            1657     1        v         10 CONTINUE
            1658                           RETURN
            1659                           END

 Diagnostic messages: program name(CFTRIG)
   jwd8220o-i  "fftx.f", line 1647: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "fftx.f", line 1653: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "fftx.f", line 1653: This loop is software pipelined.
   jwd8205o-i  "fftx.f", line 1653: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 42.
   jwd8209o-i  "fftx.f", line 1654: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 13
   Statements : 12
   Stack(byte): 16
   Prefetch num: 0

 Scoping unit of external sub-program : CFTRIG
   Attribute and Cross reference of name
     ANGLE
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1654
      |(Reference)      : 1655  1656
     ASIN
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1650
     CFTRIG
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1647
      |(Reference)      : 
     COS
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1655
     DEL
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1651
      |(Reference)      : 1654
     FLOAT
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1651  1654
     I
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1653
      |(Reference)      : 1654  1655  1656
     L
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1652
      |(Reference)      : 1653
     N
      |(Class and Type) : variable name, INTEGER(4)-implicited
      |(Attributes)     : dummy-argument
      |(Declaration)    : 1647
      |(Definition)     : 
      |(Reference)      : 1651  1652  1652
     PI
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 1650
      |(Reference)      : 1651  1651
     SIN
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 1656
     TRIGS
      |(Class and Type) : variable name, REAL(8)-implicited
      |(Attributes)     : DIMENSION, dummy-argument
      |(Declaration)    : 1647  1649
      |(Definition)     : 1655  1656
      |(Reference)      : 
   Cross reference of label
     (Label) (label-kind)               (line-no.)
     ------- ------------- ------------ ----------
         10  execution     (Definition) 1657  
                           (Reference)  1653

 Total information
   Procedures       : 12
   Total lines      : 1660
   Total statements : 732
   Total stack(byte): 80
   Total prefetch num: 16

 Include file name list
     1 : ../include/rank.h

